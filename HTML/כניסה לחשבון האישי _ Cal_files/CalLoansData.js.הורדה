var _dialogMessages = new LoanDialogDictionary();
var _jsonHelper = new JsonHelper();
var _popupForms = new Array();

var ResponseStatus =
{
    None : 0,
    Success : 1,
    Failure : 2,
    Warning : 3,
    Invalid : 4,
    Information : 5
}

var ResponseAction =
{
    None : 0,
    OpenPopup : 1,
    LoadPage : 2,
    InlineError : 3,
    Script: 4,
    DataObject: 5
}

var PopupForms =
{
    LoanDetailes: 1,
    CommunicationOptions: 2,
    PracticeBudgetDetails: 3,
    GetBackToMe: 4,
    SuccessBackToYouToday: 5,
    ExitShipment: 6
}

var CourierIdentity =
{
    Aviv: "0,1",
    Bar: "2"
}

var AppEnvironment =
{
    CalOnline: 0,
    Marketing: 1
}


function PopupForm(p_id, p_parameters, p_submitDelegate)
{
    this.id = p_id;
    this.parameters = p_parameters;
    this.submitDelegate = p_submitDelegate;
}

function PopupFormsDictionary() {
    var dicForms = new Array();

    this.setForm = function (p_id, p_parameters, p_submitDelegate) {
        dicForms[p_id] = new PopupForm(p_id, p_parameters, p_submitDelegate);
    }

    this.getForm = function (p_id) {
        return dicForms[p_id];
    }
}


function LoanDialogContent(p_header, p_body) {
    this.header = p_header;
    this.body = p_body;
}

function LoanDialogDictionary() {
    var dicMessages = new Array();

    dicMessages['SupportRequest'] = new LoanDialogContent('?רוצה שנתקשר אליך', null);
    dicMessages['RequestRejected'] = new LoanDialogContent('בשלב זה לא ניתן לאשר את בקשתך לקבלת הלוואה', 'נשמח לעמוד לשירותך בעתיד.');
    dicMessages['RequestDenied'] =      new LoanDialogContent('בשלב זה לא ניתן לאשר את בקשתך לקבלת הלוואה', 'נשמח לעמוד לשירותך בעתיד');
    dicMessages['TerminateProcess'] =       new LoanDialogContent('לא ניתן להשלים את הפעולה כעת', 'אנא נסה מאוחר יותר');

    this.getContent = function (p_key) {
        return dicMessages[p_key];
    }
}

function JsonVldPair(p_controlId, p_errorText) {
    return { "control": p_controlId, "text": p_errorText };
}

function JsonHelper() {
    var _params = [];
    var _bindableKey = "bindableField";
    this.HasParams = function () {
        return _params.length > 0;
    }
    this.toJSON = function () {        
        var jsonObject = { "bindings": [] };
        
        for (var i = 0; i < _params.length; i++) {
            jsonObject.bindings[i] = _params[i];
        }
        return jsonObject;
    }
    this.toObject = function (p_objectKey) {
        if (typeof (p_objectKey) == 'undefined') {
            p_objectKey = 'data';
        }
        var ret = '{' + p_objectKey + ':{' + _params.join(",") + '}}';
        _params = [];
        return ret;
    }
    this.resetObject = function () {
        _params = [];
    }
    this.toString = function () {
        var ret = JSON.parse(_params);
        _params = [];
        return ret;
    }
    this.addJsonParam = function (p_jsonStruct) {
        _params.push(p_jsonStruct);
    }
    this.addParam = function (p_paramName, p_paramValue) {
        _params.push(p_paramName + ':"' + p_paramValue + '"');
    }
    this.collectData = function (p_parentNode) {

        var fieldsColl = $(p_parentNode).find('input[bindableField="true"]:visible');

        fieldsColl.each(function () {
            if ($(this).hasClass('ui-autocomplete-input')) {
                _jsonHelper.addParam($(this).attr("bindableName"), $(this).attr("item-value") != undefined ? $(this).attr("item-value") : '');
            }
            else if ($(this).hasClass('combo_text_box')) {
                _jsonHelper.addParam($(this).attr("bindableName"), $(this).attr("selectedvalue"));
            }
            else {
                //alert($(this).attr('id') + " : " + $(this).val())
                _jsonHelper.addParam($(this).attr("bindableName"), escape($(this).val()));
            }
        });

        fieldsColl = $(p_parentNode).find('span[bindableField="true"]:visible input:radio:checked');

        fieldsColl.each(function () {
            _jsonHelper.addParam($(this).parent().attr("bindableName"), $(this).val());
        });

        //        fieldsColl = $(p_parentNode).find('.combo_text_box').attr['bindableField="true"]');

        //        fieldsColl.each(function () {
        //            _jsonHelper.addParam($(this).attr("bindableName"), $(this).val());
        //        });

        return _jsonHelper;
    }
};


// EFI 19/06/2012: Removed because there is no overload in javascript !
/*
function executeRequest(p_url, p_data) {
    
    executeRequest(p_url, p_data, null, null, onBeforeAjaxCall, onCompleteAjaxCall, onCompleteAjaxCall) 
}

function executeRequest(p_url, p_data, p_successDelegate, p_failureDelegate, p_beforeSendDelegate, p_completeDelegate) {
    executeRequest(p_url, p_data, p_successDelegate, p_failureDelegate, p_beforeSendDelegate, p_completeDelegate, true);
}

function executeRequest(p_url, p_data, p_successDelegate, p_failureDelegate, p_beforeSendDelegate, p_completeDelegate, p_async ) {
    executeRequest(p_url, p_data, p_successDelegate, p_failureDelegate, p_beforeSendDelegate, p_completeDelegate, p_async, 120000);
}

*/

/*
function executeRequest(p_url, p_data, p_successDelegate, p_failureDelegate, p_beforeSendDelegate, p_completeDelegate, p_async, p_timeout) {
    var options =
    {
        type: "POST",
        cache: false,
        url: p_url,
        data: p_data,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: (typeof(p_async) == 'boolean' ? p_async : true),
        timeout: (p_timeout ? p_timeout : 120000),
        error: function (msg) {
            if (p_failureDelegate != null) {
                $(p_failureDelegate(msg));
            }
        },
        success: function (response) {
            if (p_successDelegate != null) {
                $(p_successDelegate(response.d));
            }
        },
        beforeSend: function (request) {
            if (p_failureDelegate != null) {
                $(p_beforeSendDelegate);
            }
        },
        complete: function () {
            if (p_completeDelegate != null) {
                $(p_completeDelegate);
            }
        }
    };

    jQuery.ajax(options);
}
*/



var __submitOnce = false;
var siteContentLayer = document.getElementById("siteContent");
var overlayLayer = document.getElementById("TransparentOverlay");
function animateButton(p_control)
{
    var divs = p_control.getElementsByTagName("DIV");
    var divHover = divs[0];
    var divHout = divs[1];
    
    if (divHover.style.zIndex > 0){
        divHover.style.zIndex = 0;
        divHout.style.zIndex = 1;
    }
    else{
        divHover.style.zIndex = 1;
        divHout.style.zIndex = 0;
    }            
}
this.typeOfBrowser = function(p_typeName) {
    return navigator.appName.indexOf(p_typeName) > 0;
}

function ShowOverlay() {
    var siteContentLayer = document.getElementById("siteContent");
    var overlayLayer = document.getElementById("TransparentOverlay");
    overlayLayer.style.width = siteContentLayer.offsetWidth + "px"
    overlayLayer.style.height = siteContentLayer.offsetHeight + "px";
    overlayLayer.className = this.typeOfBrowser("Internet Explorer") ?
                "opaque_ie" : "opaque_w3c";

    overlayLayer.style.visibility = "visible";
}

function HideOverlay() {
    var siteContentLayer = document.getElementById("siteContent");
    var overlayLayer = document.getElementById("TransparentOverlay");
    overlayLayer.style.visibility = "hidden";
    overlayLayer.style.height = "0px";
    overlayLayer.style.width = "0px";
}

function callScrollTop()
{
    setTimeout("top.scroll('0','0')", 50);
}

function validateExpDate(p_month, p_year)
{
    return p_month.value.length > 0 && p_year.value.length > 0
}
 
function submitOnce(p_validationGroup)
{
    try
    {
        var ss = __submitOnce
        
         __validationResult = Page_ClientValidate(p_validationGroup);
         
         if (__validationResult)
            __submitOnce = true;
        
        return ss;
        
    }
    catch(e){return false;}
}

function isIE()
{
    return window.navigator.userAgent.toLowerCase().indexOf("msie") >= 0;
}


function isSafari()
{
    return window.navigator.userAgent.toLowerCase().indexOf("safari") >= 0;
}

function bubbleForElement(p_srcElement, p_targetTagName)
{
    var p_node = p_srcElement;
    
    try
    {
        do
        {
            p_node = p_node.parentNode;
            if (p_node == null)
                break;
        }
        while (p_node.tagName.toUpperCase() != p_targetTagName.toUpperCase())
    }
    catch(e){}
    return p_node;
} 

function bubbleForClassName(p_srcElement, p_targetClassName)
{
    var p_node = p_srcElement;
    
    try
    {
        do
        {
            p_node = p_node.parentNode;
            if (p_node == null)
                break;
        }
        while (p_node.className.toUpperCase() != p_targetClassName.toUpperCase())
    }
    catch(e){}
    return p_node;
} 

function findPosX(obj)
{
   var curleft = 0;
   try
   {
       if (obj.offsetParent)
       {
              while (obj.offsetParent)
              {
                      curleft += obj.offsetLeft;
                      obj = obj.offsetParent;
              }
       }
       else if (obj.x)
              curleft += obj.x;
      
   }
   catch(e){}
          
   return curleft;
}
 
function findPosY(obj)
{
   var curtop = 0;
   try
   {
       if (obj.offsetParent)
       {
              while (obj.offsetParent)
              {
                      curtop += obj.offsetTop
                      obj = obj.offsetParent;
              }
       }
       else if (obj.y)
              curtop += obj.y;
   }
   catch(e){}
   return curtop;
}

function isCapsLockIngaged(e)
{
    //if upper case, check if shift is not pressed
    if( e.key > 64 && e.key < 91 && !e.shiftKey )
        return true;
    //if lower case, check if shift is pressed
    else if( e.key > 96 && e.key < 123 && e.shiftKey )
        return true;
    
    return false;
}

function isHebrewKeysIngaged(e)
{
    //if hebrew key is pressed
    if( e.key >= 1488 && e.key <= 1514)
        return true;
    
    return false;
}

function TrueEvent(p_event)
{
    var ie = window.event != null;
    //alert('1 : ' + e.type)
    var e = ( ie ) ? window.event : p_event;
    //alert('2 : ' + e.type)
    this.ie = window.event != null;
    
    try
    {
        //alert('3 : ' + e.type)
        this.type = e.type;
        //alert('4 : ' + e.type)
        this.sourceElement = ( ie ) ? e.srcElement : e.target;
        this.targetElement = ( ie ) ? e.toElement : e.relatedTarget;
        this.button = ( ie ) ? e.button : e.which;
        this.key = ( ie ) ? e.keyCode : e.which;        
        this.shiftKey = e.shiftKey;
        this.posX = new MousePos(e).posX;
        this.posY = new MousePos(e).posY;
    }
    catch(e){alert(e.description)}
}

function MousePos(e)
{
    var ie = window.event != null;
    this.posX = ( ie ) ? e.clientX + document.body.scrollLeft : e.pageX;
    this.posY = ( ie ) ? e.clientY + document.body.scrollTop : e.pageY;        
}
    
// capslock tooltip
function detectRestrictions(p_pwdTexbox, p_event)
{
    var tooltip = null;
    var event = null;
    
    try
    {
    
        event = new TrueEvent(p_event);
        tooltip = document.getElementById('PasswordTooltip');

        if (isCapsLockIngaged(event)){
            tooltip.className = "capslock_tootlip";
            tooltip.style.display = "block";
        }
        else if (isHebrewKeysIngaged(event)){
            tooltip.className = "hebrew_tootlip";
            tooltip.style.display = "block";
        }
        else{
            tooltip.style.display = "none";
        }
        
    }
    catch(e){}
}

// hebrew keys tooltip
function detectHebrewKeys(e, tooltipElement, targetElement)
{
    try
    {
        if (isHebrewKeysIngaged(e))
            showTootTipMessage(e, tooltipElement, targetElement);
        else
            hideTootTipMessage(tooltipElement, targetElement);
    }
    catch(e){}
        
}

function hideTootTipMessage(tooltipElement, targetElement)
{
    try
    {
        targetElement.focus();
        tooltipElement.style.display = "none";        
    }
    catch(e){}        
}

function showTootTipMessage(e, tooltipElement, targetElement)
{
    try
    {
        tooltipElement.style.display = "block";
        tooltipElement.style.top = "-90px";// (targetElement.offsetTop - tooltipElement.offsetHeight) + "px";
        tooltipElement.style.left = "0px"; //(targetElement.offsetLeft / 2) + "px";
    }
    catch(e){alert(e.description)}
}
    



function __glbValidateDependent(p_source, p_arguments)
{
    var sourceControl = document.all[p_source.controltovalidate];
    
    if ( sourceControl.getAttribute("DependentControl") != null );
    {
        var dependentName = sourceControl.getAttribute("DependentControl");
        var controlDependent = document.all[dependentName];
        switch (controlDependent.type.toLowerCase())
        {
            case "select":
            {
                if ( controlDependent.selectedIndex < 0 )
                {
                    return false;
                }
            }
            case "text":
            {
                if ( controlDependent.Text.length < 0 )
                {
                    return false;
                }
            }
        }
        return true
    }
    
    
}

///-------------------------------------------------------------------------///
function checkPaymentLongIsValid(source, arg)
{
    arg.IsValid = false;
    
    var number = eval("document.all." + source.controltovalidate).value;

    if (isFinite(number))
    {   
        var percision = number.indexOf(".")
        
        if (percision > 0)
        {
            return;
        }
        
        // init as string for checking length.
        var majorNumber = "0";
        var minorNumber = "0"

        if (percision  == -1)
        {
        majorNumber = number
        }
        else
        {
        majorNumber = number.substring(0, percision)
        minorNumber = number.substring(percision+1, number.length)
        }
        
        // for debug 
        // alert(majorNumber + "  **  "  + minorNumber + " \n" + (majorNumber.length) + "  **  "  + minorNumber.length)
        
        // check the number 
        if (majorNumber.length <=8 && minorNumber.length <=2)
        {
            if (parseFloat(number) >= 1)
            {
                arg.IsValid = true;
            }
        }
    }

}

///-------------------------------------------------------------------------///

///-------------------------------------------------------------------------///
function checkPaymentIsValid(source, arg)
{        
    arg.IsValid = false;

    var number = document.getElementById (source.controltovalidate).value;

    if (isFinite(number))
    {   
        var percision = number.indexOf(".")
        
        if (percision > 7)
            {
                return;
            }
        
        // init as string for checking length.
        var majorNumber = "0";
        var minorNumber = "0"

        if (percision  == -1)
            {
            majorNumber = number
            }
        else
            {
            majorNumber = number.substring(0, percision)
            minorNumber = number.substring(percision+1, number.length)
            }
        
        // for debug 
        // alert(majorNumber + "  **  "  + minorNumber + " \n" + (majorNumber.length) + "  **  "  + minorNumber.length)
        
        // check the number 
        if (majorNumber.length <=8 && minorNumber.length <=2)
        {
            if (parseFloat(number) >= 1)
            {
                arg.IsValid = true;
            }
        }
    }

}

///-------------------------------------------------------------------------///
// opens TermsOfUse pop up page
function openTermsOfUsePopUp(Url)
{
   feat = "scrollbars=yes,width=380,height=450";
   window.open(Url, "TermsOfUse", feat);
}

///-------------------------------------------------------------------------///
// opens CalMail join pop up page
function openCalMailPopUp(Url)
{
    var __height;
    if (screen.height >= 675)
        __height = 700;
    else
        __height = screen.height - 40;

    feat = "screenX=50px,screenY=100px,left=50px,top=10px,scrollbars=no,width=655,height=" + __height;
    //var win = window.open(Url, "CalMail", feat);
  // if (win!=null)
   //     win.focus();
}

///-------------------------------------------------------------------------///
// opens credit-product pop up page
function openCreditProductsPopUp(creditUrl)
{
  
   creditUrl = "../CreditProducts/" + creditUrl
   feat = "top=50,scrollbars=yes,width=400,height=450";
   window.open(creditUrl, "credits", feat);
}

///-------------------------------------------------------------------------///
// calls validation and if all ok alert the user - this is been used 
// when we want to do validations but not do the actual submit.
function alertAfterValidataion(p_doValid, p_validationGroup, p_message)
{
    try {
        var _validationResult = true;
            
        if (p_doValid) {
            if (typeof(Page_ClientValidate) == 'function') {
                    _validationResult= Page_ClientValidate(p_validationGroup);
            }
         }

        if (_validationResult )
	        alert(p_message);
    }
    catch(e)
    {}
    
    event.returnValue = false;
}

var _minComboWidth = -1;
var _maxComboWidth = -1;
var _FixedWidth    = -1;
var _cardsCombo = null;


function get_cardComboWidth()
{
    return _cardsCombo == null ? 0 : _cardsCombo.offsetWidth;
}

function __setComboWidth()
{       
    var widthGap = 6;
    
    if (_cardsCombo == null)
        return;
    
    if (_FixedWidth != -1)
    {
        
        _cardsCombo.style.width = _FixedWidth + widthGap
    }
    else
    {
        
	    var clientWidth = _cardsCombo.clientWidth	
	    if (clientWidth > _maxComboWidth)
	    {
	        _cardsCombo.style.width = _maxComboWidth + widthGap
	    }
	    else
	    {
	        if (clientWidth < _minComboWidth)
	        {
	            _cardsCombo.style.width = _minComboWidth + widthGap
	        }
	    }
	}
	
	return _cardsCombo.offsetWidth;
}

////////////////////////////////////////////////////////////////////////////////////
/* POP UP HANDLING */
var m_popup;
var minute_message = "";
var display_minute_message = false;
function __animWait()
{
    try{m_popup.imgAnim.src = "../../App_Themes/Default/Images/loading.gif";}
    catch (e){return;}
}
function __getPopUpHeader(p_popup)
{
    // save ref to the pop up:
    m_popup = p_popup;
    
    var htmlHeader  = "<style>.PleaseWaitMessage { font-family: 'Ploni',Arial;font-size: 12px;font-weight: bold;text-align: center;width:100%; color: Black; }   img { padding-bottom:5px; }</style>"
    htmlHeader      += "<center><BR><BR>"    
    htmlHeader      += '<IMG SRC="../../App_Themes/Default/Images/loading.gif" id=imgAnim /><BR><B>';
    htmlHeader      += '<span class="PleaseWaitMessage">' + document.getElementById("__WAIT_MSG_BY_CULTURE").value + '</span>';
    setTimeout("__animWait()", 200); // for the animation to start.
    
    return htmlHeader;
}

function __getPopUpFooter()
{  
    var htmlfooter = ""
    
    // whether to add the one-minute-wait message
    if (display_minute_message)
        htmlfooter  += "<BR><span class='PleaseWaitMessage'>" + minute_message; + "</div>"

    htmlfooter += "</b></center>"
    
    return htmlfooter;
}

function ValidateNumber()
{
    if (event.keyCode < 46 || event.keyCode > 57 || event.keyCode==47) 
        {event.returnValue = false;}
}

function ValidateNumber(p_event)
{
    
    var trueEvent = new TrueEvent(p_event);
      
    try
    {
        if (trueEvent.key == 0 || trueEvent.key == 8) {return;}
        if (trueEvent.key < 46 || trueEvent.key > 57 || trueEvent.key==47) 
        {
            cancelEvent(p_event);
        }
    }
    catch(e){}
}

function cancelEvent(e)
{
    try
    {
        if (!e) {e = window.event;}
        if (e.preventDefault)
            e.preventDefault();

        else
            e.returnValue = false;
    
    }
    catch(e){}
}

function stopEvent(e)
{
    try
    {        
        if (!e) {e = window.event;}
        if (e.stopPropagation)
            e.stopPropagation();
        else
            e.cancelBubble = true;
    }
    catch(e){}
}

////////////////////////////////////////////////////////////////////////////////////
// been useed in VALIDATORS
// hook to the onkeypress
function __hookDateEvents(p_month, p_year)
{       
    var oMnth = getEle(p_month)
    if (oMnth != null)
    {
        //oMnth.onkeyup = __jumpToYearCtrl(null, p_month, p_year);        
    }
}


// check the length of the month and jump
function __jumpToYearCtrl(p_event, p_month, p_year)
{      
    var trueEvent = new TrueEvent(p_event);
    
    if(trueEvent.key == 16 || trueEvent.key == 9)
        return false;
        
    var monthValue = getEle(p_month)            
    if(monthValue.value.length == 2 && isFinite(monthValue.value))
    {        
        var oYear = getEle(p_year)
        if (oYear != null)
        {
            oYear.focus();
            //oYear.select();
        }
    }
}

//////////COMBINED FROM VALIDATORS///////////////////////////////////
function removeOnChangeValidator(p_control, p_function)
{            
    var i;
    var new_ev = ""; var ev;
   
    if (p_control == null) 
        return;
        
    if (typeof(p_control.tagName) == "undefined" && typeof(p_control.length) == "number") {
        for (i = 0; i < p_control.length; i++) {
            var inner = p_control[i];
            if (typeof(inner.value) == "string") {
                removeOnChangeValidator(inner, p_function);
            }
        }
        return;
    }
    else if (p_control.tagName != "INPUT" && p_control.tagName != "TEXTAREA" && p_control.tagName != "SELECT") {
        for (i = 0; i < p_control.children.length; i++) {
            removeOnChangeValidator(p_control.children[i], p_function);
        }
        return;
    }
    else {
		if (p_control.type == "radio")
			ev = p_control.onclick;
		else
			ev = p_control.onchange;
	    
		if (typeof(ev) == "function" ) {
			ev = ev.toString();
			ev = ev.substring(ev.indexOf("{") + 1, ev.lastIndexOf("}"));
		}
		else {
			ev = "";
		}
		var ev_array  = ev.split(";"); 
		for (i=0; i < ev_array.length; i++)
		{    
		    //p_function = p_function.replace("(event)", "");
            //p_function = p_function.replace("()", "");
		
			if (ev_array[i].indexOf(p_function) == -1)
			{
				if (new_ev == "") 
					new_ev =  ev_array[i];
				else
					new_ev += ";" + ev_array[i];
			}
		}

		if (p_control.type == "radio")
			p_control.onclick = new Function(new_ev);
		else
			p_control.onchange = new Function(new_ev);    	    
    }
}

// this value must be set from the server - from a constant.
var areaCodeEmptyValue;
function validateAreaCode(val, args)
{
    if (event.type == 'change')
        return;
        
    args.IsValid = false; 
    
    try {
        // get control names
        var areacodecontrol = getEle(val.id).getAttribute("areacodecontrol")
        //var controltovalidate = getEle(val.id).getAttribute("controltovalidate")
        var controltovalidate = getEle(val.id).controltovalidate;
        
        // get refernces to controls 
        areacodecontrol = getEle(areacodecontrol);
        controltovalidate = getEle(controltovalidate);
        
        // check values
        if (controltovalidate.value != ""){
            if (areacodecontrol.value != areaCodeEmptyValue)
            {
                args.IsValid = true; 
            }
        }
    }
    catch (e) // for debug
    {
        alert("ישנה שגיאה בבדיקת התקינות קידומת\n" + e.message);
    }
}

function validatePhoneEmptyAreaCode(val, args)
{    
    if (event.type == 'change')
        return;

    args.IsValid = false;

    // get control names
    //var areacodecontrol = getEle(val.id).getAttribute("controltovalidate")
    var areacodecontrol = getEle(val.id).controltovalidate;
    var phonetovalidate = getEle(val.id).getAttribute("phonecontrol");
    
    // get refernces to controls 
    areacodecontrol = getEle(areacodecontrol);
    phonetovalidate = getEle(phonetovalidate);
    
    try {
    
        if (areacodecontrol.value == areaCodeEmptyValue)
        {
            args.IsValid = true;  
        }
        else
        {
            if (phonetovalidate.value != "")
                 args.IsValid = true;
        }
    }
    catch (e) // for debug
    {
        alert("ישנה שגיאה בבדיקת התקינות קידומת\n" + e.message);
    }
}

/////////////////////////
function disableEvent(p_event)
{
	if (!p_event) var e = window.event;
	e.cancelBubble = true;
	if (e.stopPropagation) e.stopPropagation();
}

//////////////
// misc tools

function ValidNum_no_point(p_event)
{
    if (p_event.keyCode < 46 || p_event.keyCode > 57 || p_event.keyCode==47 || p_event.keyCode==46) 
        p_event.returnValue = false;
}


// display/hide
function __setDisplay(ctrl)
{
    if (! ctrl.enabled)
    {
        ctrl.style.visibility = 'hidden';
        ctrl.style.display = 'none';
    }
    else
    {
        ctrl.style.visibility = 'visible';
    }

}
    

function getEle(id)
{
    return document.getElementById(id);
}


///-------------------------------------------------------------------------///
// opens about and demo
function openAboutOrDemoPopUp(Url)
{
    var winFeatures = "top=0,left=0,width=705,height=460";
    var winObj = window.open(Url, "AboutOrDemo", winFeatures);
}
    
///-------------------------------------------------------------------------///
// opens about and demo
function openQAWindow()
{
    var winFeatures = "status=yes,toolbar=yes,menubars=yes,location=yes,resizable=yes,left=50,top=50,scrollbars=yes,width=650,height=450";
    var winObj = window.open("http://192.114.38.9/kesher/faq/shelot_home.asp", "qa", winFeatures);
}


function __setTopicComboWidth(combo)
{   
    if (getEle(combo) != null)
    {
        getEle(combo).style.width = _cardsCombo.clientWidth;
    }
}

function ValidatePasswordNotEqualUserName(src, args)
{
    try
    {
        args.IsValid = true;
        var usernameAttr = src.attributes["username"];
        var usernameControlAttr = src.attributes["usernamecontrol"];
        var username = "";
        var passwordId = src.controltovalidate;
        var txtPassword = getEle(passwordId);

        

        if (usernameAttr.value != "")
        {
           username = usernameAttr.value;
        }
        else if (usernameControlAttr.value != "")
        {
           var txtUsername = getEle(usernameControlAttr.value);
           if (txtUsername != null)
           {
               username = txtUsername.value;
           }
           
        }
 
        if (username.toLowerCase() == txtPassword.value.toLowerCase())
        {
            args.IsValid = false;
        }
    }
    catch(ex)
    {
        args.IsValid = true;    
    }
}

function FireDefaultButton(src, args)
{
    try 
    { 
        args.IsValid = true;
        __defaultFired = false;
    }
    catch(e){}
}

var CrdtPrdCrdPnl_trMsgBx = null;
function validateServerClientErrors(val, args)
{
    try {
        var msgBox;
        
        if (CrdtPrdCrdPnl_trMsgBx == null)
        {
            var hiddenBox = document.getElementById(val.attributes["controltovalidate"].value);
            var msgBoxId = hiddenBox.value;   
            msgBox = document.getElementById(msgBoxId); 
               
            if (msgBox != null)
            {
                msgBox.innerText = "";
            } 
        }
        else
        {
            msgBox = document.getElementById(CrdtPrdCrdPnl_trMsgBx);
            if (msgBox!=null){
                msgBox.style.display = 'none';
            }            
        }
        
        args.IsValid = true;

    }
    catch(e){
        //alert(e.message);
        args.IsValid = true;
    }

    // when fire method is used by the page - this param exists
    try 
    { 
        __defaultFired = false;
    }
    catch(e){}    
}

function validateNumeric(p_textbox, p_event)
{
    var trueEvent = new TrueEvent(p_event);
        
    var isValidChar = 
        (trueEvent.key >= 48 && trueEvent.key <= 57) ||
        (trueEvent.key >= 96 && trueEvent.key <= 105) ||
        (trueEvent.key >= 37 && trueEvent.key <= 40) ||
        (trueEvent.key == 8 || trueEvent.key == 9 ||
         trueEvent.key == 46);
    
    isValidChar = isValidChar && trueEvent.shiftKey == false;
    
    if(isValidChar == false)
        cancelEvent(p_event);
}

function validateNumericNew(p_textbox, p_event)
{
    var trueEvent = new TrueEvent(p_event);
        
    var isValidChar = 
        (trueEvent.key >= 48 && trueEvent.key <= 57) ||        
        (trueEvent.key >= 37 && trueEvent.key <= 40) ||
        (trueEvent.key == 8 || trueEvent.key == 9 ||
         trueEvent.key == 46);    
    isValidChar = isValidChar && trueEvent.shiftKey == false;
    
    if(isValidChar == false)
        cancelEvent(p_event);
}
    
function tooltipMover(obj, e)
{
    var trueEvent = new TrueEvent(e)

//    var tipTemplate = "<div class=\"floating_layer\"><div class=\"header\"></div><div class=\"content\"></div><iframe style=\"position:absolute;top:0px;left:0px;width:100%;height:150px;z-index:-1;filter:mask()\"></iframe></div>";
//    obj.parentNode.innerHTML = obj.parentNode.innerHTML + tipTemplate.replace('{0}', obj.offsetHeight)
    
    var floater = obj.parentNode.parentNode.getElementsByTagName('div')[1];
    
    floater.style.left = ((floater.offsetWidth + 4) * -1) + "px";
    floater.style.zIndex = 5000;

    floater.style.visibility='visible';
    
}

function tooltipMout(obj, e)
{
   
    var trueEvent = new TrueEvent(e)

    if(trueEvent.targetElement.className == "header")
        return;
        
    var parent = bubbleForClassName(obj, "floating_layer");
        
    if (parent != "undefined")
        obj.parentNode.parentNode.getElementsByTagName('div')[1].style.visibility='hidden';
}
         
// this method matches a string value to alpha-numeric
// characters only (eng / heb / digits) and erases the
// none-valid characters from the string. Used to validate
// a textbox value - call this mthod on keyup event
function validateTextual(p_textbox, p_event)
{
    var trueEvent = new TrueEvent(p_event);

    var isValid = (trueEvent.key >= 1488 && trueEvent.key <= 1514)   //hebrew
//alert(trueEvent.key + " >= 1488 && " + trueEvent.key + " <= 1514 " + "\n\r" + isValid + "\n\r" + p_event.preventDefault)
    if (!isValid) 
    {
        cancelEvent(p_event);
    }
}


function PP_ValidationSummaryOnSubmit(validationGroup) {
    
    if (typeof (Page_ValidationSummaries) == "undefined")
        return;

    var summary, sums, s;
    for (sums = 0; sums < Page_ValidationSummaries.length; sums++) {
        summary = Page_ValidationSummaries[sums];
        summary.style.display = "none";

        if (!Page_IsValid && IsValidationGroupMatch(summary, validationGroup)) 
        {
            var i;
            if (summary.showsummary != "False") 
            {
                summary.style.display = "";

                if (typeof (summary.displaymode) != "string") 
                {
                    summary.displaymode = "BulletList";
                }

                switch (summary.displaymode) 
                {
                    case "List":
                        headerSep = "";
                        first = "";
                        pre = "<div class='" + summary.attributes['ExtraClass'].value + "'>";
                        post = "</div>";
                        end = "";
                        break;

                    case "BulletList":
                    default:
                        headerSep = "";
                        first = "<table cellpadding='0' id='check' cellspacing='0' class='white_info " + summary.attributes['ExtraClass'].value + "'><tr><td class='up_right'></td><td class='up_center'></td><td class='up_left'></td></tr><tr><td class='displayimage'></td><td  class='center' colspan='2'>";
                        pre = "<div class='" + summary.attributes['ExtraClass'].value + "ff' tabindex={X} onfocus='this.style.outline=\"dotted 1px black\"' onblur='this.style.outline=\"none\"'>";
                        post = "</div>";
                        end = "</td></tr><tr><td class='down_right'></td><td class='down_center'></td><td class='down_left'></td></tr></table>";
                        
                        window.scrollTo(0,0);
                        break;

                    case "SingleParagraph":
                        headerSep = " ";
                        first = "";
                        pre = "";
                        post = " ";
                        end = "<br>";
                        break;
                }

                s = "";
                if (typeof (summary.headertext) == "string") 
                {
                    s += summary.headertext + headerSep;
                }

                s += first;

                var tabIndexCounter = 1;
                for (i = 0; i < Page_Validators.length; i++) 
                {
                    if (!Page_Validators[i].isvalid && typeof (Page_Validators[i].errormessage) == "string") 
                    {
                        s += pre + Page_Validators[i].errormessage + post;

                        s = s.replace('{X}', "'" + tabIndexCounter + "'");

                        var validatedElementToTab;
                        switch (Page_Validators[i].errormessage) {
                            case 'יש למלא מילת זיהוי':
                            case 'יש להזין אותיות בעברית בלבד':
                                validatedElementToTab = document.getElementById('ctl00_FormAreaNoBorder_FormArea_txtIdWord');
                                break;
                            case 'יש לבחור לפחות הודעה אחת שברצונך לקבל':
                                validatedElementToTab = document.getElementById('ctl00_FormAreaNoBorder_FormArea_lblMessagesIntro');
                                break;
                            case 'יש לאשר את התנאים המשפטיים':
                                validatedElementToTab = document.getElementById('ctl00_FormAreaNoBorder_FormArea_chkConfirmLegalTerms');
                                break;
                        }
                        if (validatedElementToTab) {
                            validatedElementToTab.tabIndex = tabIndexCounter++;
                        }
                    }
                }

                s += end;
                summary.innerHTML = s;
            }

            if (summary.showmessagebox == "True") 
            {
                s = "";
                if (typeof (summary.headertext) == "string") 
                {
                    s += summary.headertext + "\r\n";
                }

                var lastValIndex = Page_Validators.length - 1;
                for (i = 0; i <= lastValIndex; i++) {
                    if (!Page_Validators[i].isvalid && typeof (Page_Validators[i].errormessage) == "string") {
                        switch (summary.displaymode) {
                            case "List":
                                s += Page_Validators[i].errormessage;
                                if (i < lastValIndex) {
                                    s += "\r\n";
                                }
                                break;

                            case "BulletList":

                            default:
                                s += "- " + Page_Validators[i].errormessage;
                                if (i < lastValIndex) {
                                    s += "\r\n";
                                }
                                break;

                            case "SingleParagraph":
                                s += Page_Validators[i].errormessage + " ";
                                break;
                        }
                    }
                }
                alert(s);
            }
        }
    }
    let elements = document.getElementsByClassName("ff");
    if (elements && elements.length > 0) {
        elements[0].focus({ preventScroll: false });
    }
}


function FixedDottedTable(tbDotted) {
    var table = document.getElementById(tbDotted);
    if (table != null) {
        table.rows[table.rows.length - 1].className += " footer";
    }
}

function getToolTipLayer(p_sender)
{
    return p_sender.parentNode.getElementsByTagName("div")[0];
}

function hideFormTooltip(p_sender, p_event, p_content)
{
    try
    {
       
        var _gridToolTip = this.getToolTipLayer(p_sender); 
        _gridToolTip.innerHTML = "";
        
    }
    catch(e)    
    {
        alert(e.description);
    }
}

function getTooltipHtml(p_content)
{
    return "<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"form_tooltip_template\">" +
                "<tr>" +
                    "<td class=\"tt_top_right\"></td>" +
                    "<td class=\"tt_top_center\"><span style=\"_padding-top: 2px\"></span></td>" +
                    "<td class=\"tt_top_left\"></td>" +
                "</tr>" +
                "<tr>" +
                    "<td class=\"tt_middle_right\"><span style=\"padding-right: 7px\"></span></td>" +
                    "<td>" + p_content + "</td>" +
                    "<td class=\"tt_middle_left\"><span style=\"padding-left: 7px\"></span></td>" +
                "</tr>" +
                "<tr>" +
                    "<td class=\"tt_bottom_right\"></td>" +
                    "<td class=\"tt_bottom_center\"><span style=\"_padding-bottom: 2px\"></span></td>" +
                    "<td class=\"tt_bottom_left\"></td>" +
                "</tr>" +
                "<tr>" +
                    "<td style=\"background-color:transparent\"></td>" +
                    "<td class=\"tt_bottom_tail\" style=\"background-color:transparent\"></td>" +
                    "<td style=\"background-color:transparent\"></td>" +
                "</tr>" +
                "</table></div>";    
}



function showFormTooltip(p_sender, p_event, p_content)
{
    try
    {
        var container = this.getToolTipLayer(p_sender); 
        
        container.innerHTML = getTooltipHtml(document.getElementById(p_content).innerHTML);

        if (p_content.toLowerCase().startsWith("cashaccount")) {
            container.style.top = container.style.top ? container.style.top : ((container.offsetHeight - 170) * -1) + "px";
            container.style.left = container.style.left ? container.style.left : ((container.offsetWidth + 78) * -1) + "px";    
        }
        else {
            container.style.top = (container.offsetHeight * -1) + "px";
            container.style.left = ((container.offsetWidth -30) * -1) + "px";    
        }
    }
    catch(e){alert(e.description);}
}  


function OnMouseOverRowWitCursor (p_sender)
{
    for(i=0;i<p_sender.cells.length;i++)
    {
        p_sender.cells[i].style.backgroundColor = "#EBF9FF";
        p_sender.cells[i].style.cursor = "pointer";
    }
}

function OnMouseOutRowWithCursor (p_sender)
{
    for(i=0;i<p_sender.cells.length;i++)
    {
        p_sender.cells[i].style.backgroundColor = "transparent";
        p_sender.cells[i].style.cursor = "default";
    }    
}

function OnMouseOverRow(p_sender)
{
    for(i=0;i<p_sender.cells.length;i++)
    {
        p_sender.cells[i].style.backgroundColor = "#f7f9ff";
        p_sender.cells[i].style.cursor = "pointer";
    }
}

function OnMouseOutRow(p_sender)
{
    for(i=0;i<p_sender.cells.length;i++)
    {
        p_sender.cells[i].style.backgroundColor = "transparent";
    }    
}
    
function closeComboLists()
{
    if (typeof(_comboArray) == 'object'){
        for (x = 0; x < _comboArray.length; x++){
            var combo = $find(_comboArray[x]);
            if (typeof(combo) == 'object' && combo != null){
                if (typeof(combo._popupBehavior) == 'object' && combo._popupBehavior != null){
                    combo._popupBehavior.hide()                            
                }
            }
        }
    }
}
                
function displayAjaxCombo(p_comboId) {

    var combo = $find(p_comboId);
    try
    {
        combo.initializeButton();
        combo._popupShown();
        combo._popupHiding();
    }
    catch(e) {return;}
}


function visibleExtender(p_extenderID)
{
    if ($find(p_extenderID) != null) {
        $find(p_extenderID)._dropWrapperHoverBehavior_onhover();
    }
}
function alwaysDisplayExtender(p_extenderID)
{
    if ($find(p_extenderID) != null)
    {
        $find(p_extenderID)._dropWrapperHoverBehavior_onhover();
        $find(p_extenderID).unhover = visibleExtender(p_extenderID);
    }
}

function forceLoadPanel(p_textboxID) {
    var d = $get(p_textboxID);
    d.click();
}

function alignLeftExtender(p_extenderID) {
    var extndr = $find(p_extenderID);
    if (extndr != null)
    {
        if (extndr._dropPopupPopupBehavior != null)
        {
            var chngPosition = extndr._dropPopupPopupBehavior;
            chngPosition.set_positioningMode(2);
        }
    }
}

function forcePanelWidth(p_textboxID, p_panelItemID) {
    $get(p_panelItemID).style.width = $get(p_textboxID).clientWidth;
}

function replaceForWholeString (stringItself, originalChar, replacedChar)
{
    for (i=0; i<stringItself.length; i++)
    {
        stringItself = stringItself.replace(originalChar, replacedChar);
    }
    
    return stringItself;
}

function cmbCategoryMouseOver(e)
{
    //var customEvent = new TrueEvent(e);    
    //var ctrl = customEvent.targetElement;    

    var _selected = $(".categoryItemSelected");
    
    //if (ctrl.nodeName == "DIV" && ctrl.id.length > 0)       
    if (_selected.length == 1)       
    {                 
       _selected.removeClass("categoryItemSelected");
        _selected.addClass("categoryItemSelectedTmp");
    }
}

function cmbCategoryMouseOut(e)
{                                   
    var _selected = $(".categoryItemSelectedTmp");     
    _selected.removeClass("categoryItemSelectedTmp");
    _selected.addClass("categoryItemSelected");       
}

function ChangeIconImageUrl(objID,newImgSrc)
{
    var button = document.getElementById(objID);
    if(button != null)
    {
        button.src = newImgSrc;
    }
}

function ValidateID(str) {
    
    var R_ILEGAL_INPUT = -1;
    var R_NOT_VALID = -2;
    var R_VALID = 1; 
   //INPUT VALIDATION

   // Just in case -> convert to string
   var IDnum = String(str);

   // Validate correct input
   if ((IDnum.length > 9) || (IDnum.length < 5))
      return R_ILEGAL_INPUT; 
   if (isNaN(IDnum))
      return R_ILEGAL_INPUT;

   // The number is too short - add leading 0000
   if (IDnum.length < 9)
   {
      while(IDnum.length < 9)
      {
         IDnum = '0' + IDnum;         
      }
   }

   // CHECK THE ID NUMBER
   var mone = 0, incNum;
   for (var i=0; i < 9; i++)
   {
      incNum = Number(IDnum.charAt(i));
      incNum *= (i%2)+1;
      if (incNum > 9)
         incNum -= 9;
      mone += incNum;
   }
   if (mone%10 == 0)
      return R_VALID;
   else
      return R_NOT_VALID;
}


// checks if a date is in correct dd/mm/yyyy format and if its valid
function IsDateValid (strDate)
{
    var regexDate = /(?:0[1-9]|[12][0-9]|3[01])\/(?:0[1-9]|1[0-2]|[1-9])\/(?:19|20\d{2})/; 
    
    if (regexDate.test(strDate))
    {
        return true;
    }
    else
    {
        return false;
    }
}

function AdjustProgressBarPosition(progressBarObj)
{
    var progressBar             = document.getElementById(progressBarObj);
    var progressBarStyle        = progressBar.style;
    var progressBarWidth        = progressBar.children[0].style.width;
    //var progressBarHeight       = progressBar.children[0].style.height;
    //debugger
    progressBarWidth            = progressBarWidth.slice(0, progressBarWidth.length-2);
    //progressBarHeight           = progressBarHeight.slice(0, progressBarHeight.length-2);
    
    progressBarStyle.position   = "absolute";
    
    if(window.innerWidth)
    {
        progressBarStyle.left   = (window.innerWidth - 250 - progressBarWidth) / 2 + "px";
        //progressBarStyle.top    = (window.innerHeight - progressBarHeight) / 2 + "px";
    }
    else
    {
        progressBarStyle.left   = (document.documentElement.clientWidth - 250 - progressBarWidth) / 2 + "px";
        //progressBarStyle.top    = (document.documentElement.clientHeight - progressBarHeight) / 2 + "px";
    }    
}


// if ie6 then deal with the background image flicker bug
if (!window.XMLHttpRequest)
{
    //alert("here background fix");

    try
    {
        document.execCommand('BackgroundImageCache', false, true);
    }
    catch (e)
    {
    }
}

function menuFix ()
{
    $(document).ready(function () {
        var imgFix = document.getElementById("menuFix");
        setTimeout("", 50);
        if (imgFix != null) {
            imgFix.style.display = "none";
        }
        
    })

}

function setContentMinHeight(p_adjusterName, p_minHeight)
{
    var adjuster = document.getElementById(p_adjusterName);
    var requiredHeight = parseInt(p_minHeight.replace("px",""));
    
    if (parseInt(adjuster.offsetHeight) < requiredHeight)
        adjuster.style.height = p_minHeight;
        
}


function OnMouseOverParentRow(p_sender)
{
    for(i=0;i<p_sender.cells.length;i++)
    {
        p_sender.cells[i].style.backgroundColor = "#f7f9ff";
    }
}

function RedirectSearch(SearchBox) 
{
    var SearchText = document.getElementById(SearchBox);

    if (SearchText != null)
    {
        if (SearchText.value != "")
        {
            RedirectTo(_sUrl + _searchPath + "?k=" + encodeURIComponent(SearchText.value));
        }
        else 
        {
            alert(".נא הזן מילת חיפוש אחת או יותר");
        }
    }
}

function getScrollY()
{
    var scrOfY = 0;
    if (typeof (window.pageYOffset) == 'number')
    {
        //Netscape compliant
        scrOfY = window.pageYOffset;
    } else if (document.body && (document.body.scrollTop))
    {
        //DOM compliant
        scrOfY = document.body.scrollTop;
    } else if (document.documentElement && (document.documentElement.scrollTop))
    {
        //IE6 standards compliant mode
        scrOfY = document.documentElement.scrollTop;
    }
    return scrOfY;
}

function printPopUp() {
    document.getElementById("popUpHolder").style.width = "670";
    self.print();
    document.getElementById("popUpHolder").style.width = "360";
}


///<summary>
/// Function extension to String.
///	Replaces the placeholder tags '{0}...{n}' with the parameters based on ordinal position of the parameters
///	Example: String.format("The quick {0} fox {2} over the lazy {1}.", "brown", "Dog", "jumps");
///	Output:	The quick brown fox jumps over the lazy Dog.
///</summary>
String.format = function () {
    var currentString = null;
    if (arguments.length != 0) {
        currentString = arguments[0];
        for (var argumentIndex = 1; argumentIndex < arguments.length; argumentIndex++) {
            var modifiedString = new RegExp('\\{' + (argumentIndex - 1) + '\\}', 'gm');
            currentString = currentString.replace(modifiedString, arguments[argumentIndex]);
        }
    }

    return currentString;
};



function selectToggleGroup(groupName, parentName) {
    var group = $('#' + groupName);
    var checked = $('#' + parentName).attr('checked');
    group.children().each(function () {
        $(this).find('input[type=checkbox]').attr('checked', checked);
    });
}


function autoFocusNextCtrl(p_ctrl) {
    $("#" + p_ctrl).keyup(function (event) {
        var jCtrl = $(this);
        if (jCtrl.val().length == jCtrl.attr("maxLength")) {
            
            var code = event.keyCode;
            //digits only
            if ((code > 47 && code < 58) || (code > 95 && code < 106)) {
                var tabIdx = parseInt($(this).attr("tabindex")) + 1;
                var nextCtrl = $("[tabindex=" + tabIdx + "]");
                if (nextCtrl.length > 0) {
                    nextCtrl.select();
                    nextCtrl.focus();
                }
            }
        }
    });
}

function onlyNumbers(evt) {
    var e = evt; // for trans-browser compatibility
    var charCode = e.which || e.keyCode;

    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
        return false;
    }

    return true;
}

function onlyNumbersAndDot(evt) {
    var e = evt; // for trans-browser compatibility
    var charCode = e.which || e.keyCode;

    if (charCode == 46) return true;

    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
        return false;
    }

    return true;
}

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)", "i"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}


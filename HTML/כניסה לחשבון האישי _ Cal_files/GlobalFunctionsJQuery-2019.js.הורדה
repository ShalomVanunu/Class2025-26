function IsBrowserIe() {
    return jQuery.browser.msie;
}

function IsBrowserFireFox() {
    return Sys.Browser.agent == Sys.Browser.Firefox;
}

function $$(id, context) {
    var el = $("#" + id, context);

    if (el.length < 1) {
        el = $("[id$=_" + id + "]", context);
    }

    return el;
}

// This function binds 4 events as described in the code below
// p_maxValueAllowed - to limit the max typed amount (0 - zero for NOT limiting)
// p_minValueAllowed - to limit the min typed amount
// p_currencySign - to put currency sign (empty string - won't put anything)
function setTextboxAsMoneyField(p_controlId, p_maxValueAllowed, p_minValueAllowed, p_currencySign, p_sliderTextboxDir) {

    $$(p_controlId).keyup(function (e) {
        //setMinMaxValueTyped(this, p_maxValueAllowed, p_minValueAllowed);
    });

    $$(p_controlId).keydown(function (e) {
        if ((!e.shiftKey && !e.altKey && !e.ctrlKey && (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) ||
            e.keyCode == 46 || // Delete
            e.keyCode == 39 || // KeyLeft
            e.keyCode == 37 || // KeyRight
            e.keyCode == 8 || // Backspace
            e.keyCode == 9     // Tab
            )
            return true;
        else
            return false;
    });

    $$(p_controlId).focus(function () {
        $(this).val(convertMonthsValue($(this).val().replace(",", "").replace(p_currencySign, "")));
        $(this).select();
    });

    $$(p_controlId).blur(function () {
        //setMinMaxValueTyped(this, p_maxValueAllowed, p_minValueAllowed);
        var _value = $(this).val();

        if (p_sliderTextboxDir == "ltr")
            $(this).val(String.format("{0}{1}", p_currencySign, formatNumbers($(this).val())));
        else
            $(this).val(String.format("{1}{0}", p_currencySign, formatNumbers($(this).val())));

        fixMonthsTextByValue(p_controlId, p_currencySign, _value);
    });

}

function convertMonthsValue(p_value) {
    switch (p_value) {
        case "חודש":
            return 1;
        case "חודשיים":
            return 2;
        default:
            return p_value;
            break;
    }
}

function fixMonthsTextByValue(p_controlId, p_sliderCurrencySign, p_value) {
    if (p_sliderCurrencySign.indexOf("חודש") > -1) {
        switch (p_value) {
            case "1":
                $$(p_controlId).val("חודש");
                break;
            case "2":
                $$(p_controlId).val("חודשיים");
                break;
            default:
                break;
        }
    }
}

///	<summary>
/// uses:
/// Ex. 2984 => 2,984 and 297312984 => 297,312,984 and 298 => 298
/// 1). format: formatNumbers("12345");
///	</summary>
function formatNumbers(p_numberToFormat) {
    // uses:
    // Ex. 2984 => 2,984 and 297312984 => 297,312,984 and 298 => 298
    // 1). format: formatNumbers("12345");
    var numberToFormat = Number(p_numberToFormat);
    return numberToFormat.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
}

$.fn.digits = function () {
    // uses:
    // Ex. 2984 => 2,984 and 297312984 => 297,312,984 and 298 => 298
    // 1). format $("span.numbers").digits();
    return this.each(function () {
        $(this).text($(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
    })
}

$.fn.centerInClient = function (options) {
    // uses:
    // 1). align within an element $("#box").centerInClient({ container: window, forceAbsolute: true });
    // 2). align within the browser window  $("#box").centerInClient();

    var opt = { forceAbsolute: false,
        container: window,    // selector of element to center in
        completeHandler: null
    };
    $.extend(opt, options);

    return this.each(function (i) {
        var el = $(this);
        var jWin = $(opt.container);
        var isWin = opt.container == window;

        // force to the top of document to ENSURE that 
        // document absolute positioning is available
        if (opt.forceAbsolute) {
            if (isWin)
                el.remove().appendTo("body");
            else
                el.remove().appendTo(jWin.get(0));
        }

        // have to make absolute
        el.css("position", "absolute");

        // height is off a bit so fudge it
        var heightFudge = isWin ? 2.0 : 1.8;

        var x = (isWin ? jWin.width() : jWin.outerWidth()) / 2 - el.outerWidth() / 2;
        var y = (isWin ? jWin.height() : jWin.outerHeight()) / heightFudge - el.outerHeight() / 2;

        el.css("left", x + jWin.scrollLeft());
        el.css("top", y + jWin.scrollTop());

        // if specified make callback and pass element
        if (opt.completeHandler)
            opt.completeHandler(this);
    });
}

function toggleInnerGrid(p_gridName, p_command) {
    var parentRows = $("#" + p_gridName + " .parent_row");
    var hiddenBlocks = $("#" + p_gridName + " tbody");

    hiddenBlocks.each(function () {
        if ($(this).attr("id") != "") {
            if (p_command == "show") {
                $(this).fadeIn("slow")
            }
            else {
                $(this).fadeOut("fast")
            }
        }
        else {
            if (p_command == "show") {
                $(this).find("div.ico_grid_expand img").attr("src", "../../App_Themes/Default/Images/2019/minus.png");
            }
            else {
                $(this).find("div.ico_grid_expand img").attr("src", "../../App_Themes/Default/Images/2019/plus.png");
            }
        }
    });

    parentRows.each(function () {
        $(this).find("td").each(function () {
            if (p_command == "show") {
                $(this).css("backgroundColor", "#f7f9ff");
            } else {
                $(this).css("backgroundColor", "transparent");
            }
        });
    });
}

function isIE6() {
    return ($.browser && $.browser.msie && parseFloat($.browser.version) < 7);
}

function FixDropDownForFireFox(openedPanel) {
    if ($(".categoryPanel").attr("fixed") != "true" && $.browser.mozilla) {
        var currWidth = $(".categoryPanel").css("width").replace("px", "");
        $(".categoryPanel").css("width", eval(currWidth - 2) + "px");
        $(".categoryPanel").attr("fixed", "true");
    }
    else if ($(".categoryPanel").attr("fixed") == "true") {
        $(".categoryPanel").css("left", "0px");
    }
}

function AjaxComboAdapter(p_clientName) {
    this.comboObject = $("#" + p_clientName);
    this.indexObject = $("#" + p_clientName).find("input[type='hidden']");
    this.textObject = $("#" + p_clientName).find("input[type='text']");
    this.itemsColl = $("#" + p_clientName).find("ul").find("li");
    this.focusedValue = $("#" + p_clientName).find("ul").find("li[class='listitem_hover']").attr("value");
    this.foundFlag = false;

    this.value = function () {
        return this.itemsColl[this.indexObject.val()].value;
    }

    this.select = function (p_value) {
        var items = this.itemsColl;

        for (i = 0; i < items.length; i++) {
            if ($(items[i]).attr("value") == p_value) {
                this.indexObject.val(i);
                this.textObject.val($(items[i]).text())
                this.foundFlag = true;
                break;
            }
        }
    }
}
function RedirectTo(path) {
    if ($("form").length > 1) {
        $("form:eq(1)").remove();
    }

    document.forms[0].action = path;
    document.forms[0].__VIEWSTATE.value = '';
    document.forms[0].submit();
}

// this function makes all the links on this site will go through the RedirectTo function
// so the user will think his session is in markting site too.
function FixAllLinks() {
    $("a[href*='/Cal/']").each(function () {
        var tempUrl = $(this).attr("href");

        if (tempUrl.indexOf("www") < 0 && tempUrl.indexOf(".open") < 0) {
            $(this).attr("href", _sUrl + tempUrl);
        }
    });
}


function multiFormFix() {
    return true;
}

var __benestoDialogInd = false;
function openBenestoDialog(p_ctrl, p_height, p_width) {

    if (!__benestoDialogInd) {
        $("#" + p_ctrl).dialog({
            frameId: 'activeIframe',
            position: 'center',
            width: p_width,
            minHeight: p_height,
            modal: true, autoOpen: false,
            hide: 'fold', show: 'slide',
            closeOnEscape: true, draggable: false, resizable: false
        });
        __benestoDialogInd = true;
    }

    $("#" + p_ctrl).dialog("open");
}

function closeBenestoDialog(p_ctrl) {
    $("#" + p_ctrl).dialog("close");
}

// Numeric only control handler 
jQuery.fn.ForceNumericOnly = function () {
    return this.each(function () {
        $(this).keydown(function (e) {
            var key = e.charCode || e.keyCode || 0;
            // allow backspace, tab, delete, arrows, numbers and keypad numbers ONLY             
            return (
                key == 8 ||
                key == 9 ||
                key == 46 ||
                (key >= 37 && key <= 40) ||
                (key >= 48 && key <= 57) ||
                (key >= 96 && key <= 105));
        })
    })
};


function getSelText() {
    var txt = '';
    if (window.getSelection) {
        txt = window.getSelection();
    }
    else if (document.getSelection) {
        txt = document.getSelection();
    }
    else if (document.selection) {
        txt = document.selection.createRange().text;
    }
    else return;

    return txt;
}


function changeTextBoxFocus(p_ctrlFrom, p_ctrlToName, p_length, p_event) {
    var e = p_event; // for trans-browser compatibility
    var charCode = e.which || e.keyCode;
    var _len;

    try {
        _len = getSelText().length; //IE

        if (_len == undefined) //Fireox
        {
            var _ctrl = $(p_ctrlFrom).get(0);
            _len = _ctrl.value.substring(_ctrl.selectionStart, _ctrl.selectionEnd).length;

            if (_len == undefined)
                _len = 0;
        }
    }
    catch (e) {
        _len = 0
    }

    if (((charCode >= 48 && charCode <= 57) || (charCode >= 96 && charCode <= 105)) && _len == 0) {
        var fromTextBox = $(p_ctrlFrom);
        var currValue = fromTextBox.val();

        if (currValue.length == p_length) {
            $$(p_ctrlToName).focus();
        }
    }
}

function FixBorderOfComboInIe7Iframe() {
    if ($.browser && $.browser.msie && $.browser.version > 6 && $.browser.version < 8) {
        $(document).ready(function () {
            setTimeout(function () {
                $(".ajax__combobox_inputcontainer").css("border", "solid 1px #cbcbcb");
            }, 300);
        });
    }
}

function setOrCreateMetaTag(metaName, name, value) {
    var t = 'meta[' + metaName + '=' + name + ']';
    var mt = $(t);
    if (mt.length === 0) {
        t = '<meta ' + metaName + '="' + name + '" />';
        mt = $(t).appendTo('head');
    }
    mt.attr('content', value);
}

function selectTopLevel(p_topLayer) {
    var checkbox = p_topLayer.find("input[type='checkbox']")
    var holder = p_topLayer.find(".checkbox_holder")

    holder.attr("checked", "checked");
    holder.css("display", "block");
}

function openOnceCardsList(p_linkLabel, p_event) {
    p_linkLabel.text("בחר את הכרטיסים שיצורפו לשירות מתוך הרשימה הבאה:");
    toggleCardsListBehavior(p_linkLabel, p_event, true);
}

function toggleCardsListBehavior(p_linkLabel, p_event, p_openOnce) {
    var control = $(p_linkLabel).parent().parent();

    var listArea = control.find(".cards_list")
    var commandHolder = control.find(".select_command")
    var commandLabel = control.find(".toggle_caption");

    setTimeout(function () {
        if (listArea.is(":visible")) {
            if (p_openOnce) {
                return;
            }
            commandHolder.addClass("opened_list_ind");
            commandHolder.removeClass("closed_list_ind");
            listArea.slideUp();
        }
        else {
            if (p_openOnce) {
                if (listArea.is(":hidden")) {
                    listArea.slideDown();
                }
                commandLabel.css("cursor", "default");
                cancelEvent(p_event);
            }
            else {
                listArea.slideToggle();
                commandHolder.removeClass("opened_list_ind");
                commandHolder.addClass("closed_list_ind");
            }
        }

    }, 200);
}

function OnMouseOutParentRow(p_sender) {
    var isExpanded = $(p_sender).find(".ico_grid_expand img").attr("src").indexOf("minus") > 0;

    if (isExpanded)
        return;

    for (i = 0; i < p_sender.cells.length; i++) {
        p_sender.cells[i].style.backgroundColor = "transparent";
    }
}

function expandInnerGrid(p_gridName) {
    toggleInnerGrid(p_gridName, "show");
}

function collapseInnerGrid(p_gridName) {
    toggleInnerGrid(p_gridName, "hide");
}

function TraceBpmList(p_list) {
    var html = "";
    var divData = $("div.bpm-trace div#bpm-data");
    if (divData.length > 0) {
        divData.empty();
    }
    else {
        html = "<div class='bpm-trace'><div style='overflow:hidden;'><div class='bpm-trace-title'>The page executed:</div><div class='x_button'></div></div><div id='bpm-data'></div></div>";
        $("body").append(html);
        divData = $("div.bpm-trace div#bpm-data");

        $("div.bpm-trace div.x_button").live("click", function () {
            $("div.bpm-trace").fadeOut();
            executeRequest("../Common/GeneralAjaxCalls.asmx/DontDisplayBpmListTrace", "{ }");
        });
    }

    var list = JSON.parse(p_list);

    var bodyData = "";
    var _loggerPath;
    for (var i = 0; i < list.length; i++) {
        var bpmInfo = list[i].split(",");
        if (bpmInfo[2])
            _loggerPath = bpmInfo[2];
        else
            _loggerPath = _bpmLogger;

        bodyData += "Bpm <b>" + bpmInfo[0] + "</b>, Process - <a target='_blank' class='process-link' href='" + String.format(_loggerPath, bpmInfo[1]) + "'>" + bpmInfo[1] + "</a></br>";
    }

    divData.html(bodyData);
}

function getBpmListTrace(settings) {
    //prevent recursive calls
    if (settings.url.indexOf("GeneralAjaxCalls.asmx/GetBpmListTrace") == -1)
        executeRequest("../Common/GeneralAjaxCalls.asmx/GetBpmListTrace", "{ }", successBpmTrace);
}

function successBpmTrace(p_response) {
    if (p_response.length > 0) {
        TraceBpmList(p_response);
    }
}

function executeRequest(p_url, p_data, p_successDelegate, p_failureDelegate, p_beforeSendDelegate, p_completeDelegate, p_async, p_timeout) {

    var options =
    {
        type: "POST",
        cache: false,
        url: p_url,
        data: p_data,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: (typeof (p_async) == 'boolean' ? p_async : true),
        timeout: (p_timeout ? p_timeout : 120000),
        error: function (msg) {
            if (p_failureDelegate != null) {
                $(p_failureDelegate(msg));
            }
        },
        success: function (response) {
            if (p_successDelegate != null) {
                $(p_successDelegate(response.d));
            }
        },
        beforeSend: function (request) {
            if (p_beforeSendDelegate != null) {
                $(p_beforeSendDelegate);
            }
        },
        complete: function () {
            if (p_completeDelegate != null) {
                $(p_completeDelegate);
            }
        }
    };

    jQuery.ajax(options);
}

(function loadaf() {
    $(document).ready(function () {
        var elem = document.createElement('script');
        elem.src = 'https://restservices.cal-online.co.il/common/af.min.js';
        document.body.appendChild(elem);
    });
})();

function executeRequestWithContentType(p_url, p_contentType, p_data, p_successDelegate, p_failureDelegate, p_beforeSendDelegate, p_completeDelegate, p_async, p_timeout) {

    var options =
    {
        type: "POST",
        cache: false,
        url: p_url,
        data: p_data,
        contentType: p_contentType,
        dataType: "json",
        async: (typeof (p_async) == 'boolean' ? p_async : true),
        timeout: (p_timeout ? p_timeout : 120000),
        error: function (msg) {
            if (p_failureDelegate != null) {
                $(p_failureDelegate(msg));
            }
        },
        success: function (response) {
            if (p_successDelegate != null) {
                $(p_successDelegate(response.d));
            }
        },
        beforeSend: function (request) {
            if (p_failureDelegate != null) {
                $(p_beforeSendDelegate);
            }
        },
        complete: function () {
            if (p_completeDelegate != null) {
                $(p_completeDelegate);
            }
        }
    };

    jQuery.ajax(options);
}

function executeGET(p_args, p_innerParams) {
    alert(p_args.method);
    $.ajax(
        {
            crossDomain: false,
            cache: false, 
            async: true,
            contentType: "application/json; charset=utf-8", 
            dataType: "json",
            type: "GET",
            data: {},
            url: p_args.method,
            success: function (p_response) { $(p_args.callback(p_response, p_innerParams)); },
            error: function (msg) { if (p_args.failureCallback != null) { $(p_args.failureCallback(msg)); } },
            beforeSend: function (request) { if (p_args.beforeSendCallback != null) { $(p_args.beforeSendCallback); } },
            complete: function () { if (p_args.completeCallback != null) { $(p_args.completeCallback); } }
        });

//    if (p_args.delayMSTime == null)
//        p_args.delayMSTime = 500

//    setTimeout(function () { jQuery.ajax(settings); }, p_args.delayMSTime);
    }


function executePOST(p_args) {

    var settings = $.extend(true, {},
        {
            crossDomain: false, cache: false, async: true,
            contentType: "application/json; charset=utf-8", dataType: "json"
        },
        {
            type: "POST",
            data: p_args.data,
            url: p_args.method,
            success: function (p_response) { $(p_args.callback(p_response, p_innerParams)); },
            error: function (msg) { if (p_args.failureCallback != null) { $(p_args.failureCallback(msg)); } },
            beforeSend: function (request) { if (p_args.beforeSendCallback != null) { $(p_args.beforeSendCallback); } },
            complete: function () { if (p_args.completeCallback != null) { $(p_args.completeCallback); } }
        });
        if (p_args.delayMSTime == null)
            p_args.delayMSTime = 500

    setTimeout(function () { jQuery.ajax(settings); }, p_args.delayMSTime);
}

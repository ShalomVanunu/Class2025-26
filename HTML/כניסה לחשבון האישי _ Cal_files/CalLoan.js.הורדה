/// <reference path="JQuery/jquery-1.7.1-vsdoc.js" />
/// <reference path="CalLoansData.js" />
var _wizard;
var _slider;
//var _dataContainerSelectorFormat = "div#dataContainer div#page";
var _dataContainerSelectorFormat = "div#dataContainer div";

var _animationDialog = null;
var _popupForms = null;

$(document).ready(function () {
    fixRadioButtonList();
    LoadCommunicationClientLogic(false);
    createToolTips();
    createPopupFormsCollection();
    
    $(".support_link_button").on('click', function (e) {
        e.preventDefault();
        if ($("#chkHasCreditCard").length == 0 || $("#chkHasCreditCard").attr("checked") == "checked") {
            $(".ui-dialog").hide();
            loadSupportRequestDialog();
        }
        return false;
    });

    setEligibilityCheckScreenButtons();
    $("#cancelLoanRequest").click(function (e) {
        loadSupportRequestDialog();
    });

    //$("#cancelLoanRequest").removeClass("cancel_container_hidden");
    //$(".button_container").addClass("button_approve_loan");

    $("#updateLoanDetails").live('click', function () {
        executeRequest("LoanMarketing.aspx/LoadLoanDetails", "", parseServerResponse, onErrorFromPopup, onBeforeAjaxCallPopup, onCompleteAjaxCall);
    });

    $("#updateCommDetails").live('click', function () {
        executeRequest("LoanMarketing.aspx/LoadCommDetailes", "", parseServerResponse, onErrorFromPopup, onBeforeAjaxCallPopup, onCompleteAjaxCall);
    });

    $("#updateBudgetDetails").live('click', function () {
        executeRequest("LoanMarketing.aspx/LoadBudgetDetails", "", parseServerResponse, onErrorFromPopup, onBeforeAjaxCallPopup, onCompleteAjaxCall);
    });
});

function LoadCommunicationClientLogic(LoadAnyway) {
    if (_wizard != undefined) {
        if ((((_wizard.currentStep + 1) == 1) && ((_wizard.currentSection - 1) == 4)) || LoadAnyway) // מסך דרכי תקשורת
        {
            SetInitialGeneral()
            SetControlEventsGeneral();
            SetMailAddressLogic();
            SetAddressTypeResidenceLogic();
            SetAddressTypeMailLogic();
        }
    }
}

function fixRadioButtonList() {
    var _tabIndex;
    var _checked;
    var _radio
    var _parent
    $("input:radio").each(function () {
        _radio = $(this);
        _parent = _radio.parent();
        _tabIndex = _parent.attr("tabindex");
        _checked = _parent.attr("checked");
        if (_tabIndex != undefined) {
            _radio.attr("tabindex", _tabIndex);
            _parent.removeAttr("tabindex");
        }
        if (_checked != undefined) {
            _radio.attr("checked", "checked");
            _parent.removeAttr("checked");
        }
    });
}

function createPopupFormsCollection() {
    _popupForms = new PopupFormsDictionary();

    _popupForms.setForm(PopupForms.LoanDetailes, { height: 400, width: 580 }, function (popupForm, p_theDialog) { updateLoanDetailsDelegate(popupForm, p_theDialog); });
    _popupForms.setForm(PopupForms.CommunicationOptions, { height: 700, width: 580 }, function (popupForm, p_theDialog) { updateCommunicationOptionsDelegate(popupForm, p_theDialog); });
    _popupForms.setForm(PopupForms.PracticeBudgetDetails, { height: 700, width: 580 }, function (popupForm, p_theDialog) { updateOccupationAndBudgetDelegate(popupForm, p_theDialog); });
    _popupForms.setForm(PopupForms.ExitShipment, { height: 300, width: 450 }, function (popupForm, p_theDialog) { _shipmentForm.updateExitShipmentReasonBPM313Delegate(popupForm, p_theDialog); });
}

function updateLoanDetailsDelegate(popupForm, p_theDialog) {
    var jsonHelper = new JsonHelper();
    var data = jsonHelper.collectData(popupForm).toObject("p_request");
    if (validateLoanForm(popupForm)) {
        p_theDialog.dialog("showAjaxLoadingAnimation");
        setTimeout(function () {
            executeRequest("LoanMarketing.aspx/UpdateLoanDetails", data, parseServerResponse, onErrorFromPopup, function () { /* No Animation */ }, onCompleteAjaxCall);
        }, 2000);
    }
}

function updateCommunicationOptionsDelegate(popupForm, p_theDialog) {
    var jsonHelper = new JsonHelper();
    var data = jsonHelper.collectData(popupForm).toObject("p_request");

    if (validateLoanForm(popupForm)) {
        p_theDialog.dialog("showAjaxLoadingAnimation");
        setTimeout(function () {
            executeRequest("LoanMarketing.aspx/UpdateCommDetailes", data, parseServerResponse, onErrorFromPopup, function () { /* No Animation */ }, onCompleteAjaxCall);
        }, 2000);
    }
}

function updateOccupationAndBudgetDelegate(popupForm, p_theDialog) {
    var jsonHelper = new JsonHelper();
    var data = jsonHelper.collectData(popupForm).toObject("p_request");

    if (validateLoanForm(popupForm)) {
        p_theDialog.dialog("showAjaxLoadingAnimation");
        setTimeout(function () {
            executeRequest("LoanMarketing.aspx/UpdateBudgetDetails", data, parseServerResponse, onErrorFromPopup, function () { /* No Animation */ }, onCompleteAjaxCall);
        }, 2000);
    }
}


function createToolTips(p_containerSelector) {

    var contentElement = null;
    
    var targetElements = p_containerSelector == null ?
        $('BODY').find('div.loan_form_row div.tooltip_icon') :
        p_containerSelector.find('div.loan_form_row div.tooltip_icon');

    targetElements.each(function () {

        contentElement = $(this).find('input[type="hidden"]')

        if (typeof (contentElement) != 'undefined') {

            $(this).tooltip({
                width: 230,
                hideDuration: 150,
                showDuration: 800,
                content: contentElement.val()
            });
        }
    });
}


function stepClick(step, section) {
    if (validateLoanForm(".loan_form_inner")) {
        _jsonHelper.collectData("div#dataContainer");
        data = _jsonHelper.toObject("p_request");
        _jsonHelper.resetObject();


        //////////////////////////////
        // Begin - Google Analytics //
        //////////////////////////////
        try {
            var currentStepControlName = String.format("WizardStep{0}Section{1}", _wizard.currentStep + 1, _wizard.currentSection - 1);
            var GoogleAnaliticsFolderLocation = _calLoanManagerEnvironment == AppEnvironment.CalOnline ? "CalOnline" : "Marketing";
            $("iframe#ifrm" + currentStepControlName)[0].contentWindow.TrackingEventClick(currentStepControlName, GoogleAnaliticsFolderLocation);
        }
        catch (e) { }
        ////////////////////////////
        // End - Google Analytics //
        ////////////////////////////
		
        executeRequest(String.format("LoanApplication.aspx/OnStep{0}Section{1}", step + 1, section - 1), data, parseServerResponse, onError, onBeforeAjaxCall, onCompleteAjaxCall);
    }
}


function onCompleteAjaxCall() {

    if (_animationDialog) {
        _animationDialog.dialog("close");
    }

}

function onBeforeAjaxCallPopup() {
    var _message = "פותח חלון לעידכון נתונים";
    _animationDialog = showProgressDialog("אנא המתן", _message);
}

function onBeforeAjaxCall() {
    var _message = "זכאותך להלוואה נבדקת ברגעים אלו...";
    if (_wizard != undefined && _wizard.currentStep + 1 == 3 && _wizard.currentSection - 1 == 1) {
        _message = "מעדכן פרטי הלוואה...";
    }
    _animationDialog = showProgressDialog("אנא המתן", _message);
}

function onError(p_msg) {
    var myDialog = showLoanTerminationDialog();
    myDialog.dialog("beforeClosing", function () { closeErrorPopUpDelegate(); });
    //var myDialog = getFaultDialog(200, 200, "שגיאה", "שגיאה כללית");
    //setTimeout(function() { myDialog.dialog('open'); }, 1000);
}

function onErrorFromPopup(p_msg) {

    var myDialog = getFaultDialog(200, 300, "שגיאה", "שגיאה בתהליך<br />הנך מופנה להתחיל את הבקשה מחדש !");

    setTimeout(function () { myDialog.dialog('open'); }, 1000);

    myDialog.dialog("beforeClosing", function () { closeErrorPopUpDelegate(); });

}

function onRejectErrorFromPopup() {    
    var myDialog = showLoanRejectionDialog();

    myDialog.dialog("beforeClosing", function () { closeErrorPopUpDelegate(); });

}   


function parseServerResponse(p_content) {
    if (p_content.Status == ResponseStatus.Success) {
        //var step = _slider.getCurrentSlide();
        var step = -1;
        var selector = _dataContainerSelectorFormat;  //+ (parseInt(step) + 1);
        $(selector).empty();
        $(selector).html(p_content.Data);
        //$(selector).html("<script>alert('222')</script><input type='radio' checked='true' />");


        //var prevSelector = _dataContainerSelectorFormat + (parseInt(step));
        //$(prevSelector).animate({opacity: 0}, 500);

        //_slider.goToNextSlide();
        
        // Comes from Cal.Externals
        //initDropDownLists();

        createToolTips($(selector));
        _wizard.MoveNext();

        if (p_content.Action == ResponseAction.InlineError) {
            displayInlineErrors(p_content);
        }

        $(selector).eq(0).prepend(String.format("<!-- WizardStep{0}Section{1}.ascx -->", _wizard.currentStep + 1, _wizard.currentSection - 1));
        //alert(String.format("WizardStep{0}Section{1}.ascx", _wizard.currentStep+1, _wizard.currentSection-1));

        fixRadioButtonList();
        LoadCommunicationClientLogic(false);
        setEligibilityCheckScreenButtons();
    }
    else {
        
        var myDialog = null;
        switch (p_content.Action) {

            case ResponseAction.OpenPopup:
                {
                    if (isNaN(p_content.FormId) || p_content.FormId == 0) {
                        myDialog = getFaultDialog(210, 400, p_content.MsgHeader, p_content.MsgBody);
                        myDialog.dialog("beforeClosing", function () { closeErrorPopUpDelegate(); });
                        myDialog.dialog('open');
                    }
                    else {
                        formObject = _popupForms.getForm(p_content.FormId);
                        if (typeof formObject != 'undefined') {
                            setTimeout(function () {
                                showPopupFormDialog(formObject.parameters.height, formObject.parameters.width, p_content.Data, formObject.submitDelegate);
                                if (p_content.FormId == PopupForms.CommunicationOptions ||
                                    p_content.FormId == PopupForms.PracticeBudgetDetails) {
                                    fixRadioButtonList();
                                    if (p_content.FormId == PopupForms.CommunicationOptions)
                                        LoadCommunicationClientLogic(true);
                                }
                            }, 1000);
                        }
                    }
                    break;
                }
            case ResponseAction.InlineError:

                {
                    displayInlineErrors(p_content);

                    break;
                }
            case ResponseAction.Script:
                {                    
                    eval(p_content.ScriptLiteral);
                    break;
                }
            case ResponseAction.DataObject:
                {
                    var _jsonServerDataObject = JSON.parse(p_content.DataObject);
                    try {
                        eval(String.format(p_content.ScriptLiteral, "_jsonServerDataObject"));
                    }
                    catch (err) {
                        onErrorFromPopup(null);
                    }
                    break;
                }

            default:
                break;
        }
    }
}

function displayInlineErrors(p_content) {

    var controlArray = JSON.parse(p_content.DataObject);
    for (var i = 0; i < controlArray.length; i++) {
        // EFI 13/06/2012: כעת מציגים הודעות שגיאה בראש הדף מימין במקום מתחת לכל שדה
        //showLoanFormFieldError($("#" + controlArray[i].Key).find(".control"), controlArray[i].Value);
        var error = $('<div class="error">' + controlArray[i].Value + '</div>');
        $(".loan_form_row").eq(0).before(error);
        error.fadeIn(300);
        $(".loan_form_row").eq(0).css("margin-top", "10px");
    }

    if (p_content.ScriptLiteral != null &&
        p_content.ScriptLiteral != undefined &&
        p_content.ScriptLiteral.length > 1) {
        try {
            eval(p_content.ScriptLiteral);
        }
        catch (err) {
            onErrorFromPopup(null);
        }
    }

}

function setAccountTypeDisplay(p_accountTypeDefaultCode) {
    //_accountTypeComboBox.dropdown('enable');
    _accountTypeComboBox.dropdown('setValue', p_accountTypeDefaultCode);
    $("#AccountTypeDisplay").show();
}


function setLoanDetailsValues(p_data) {
    $$("lblLoanPurpose").text(p_data.LoanPurposeName);
    $$("lblRequestedAmount").text(p_data.AmountF);
    $$("lblDayOfLoanDebit").text(String.format("{0} בחודש", p_data.DayOfLoanDebit));
    $(".ui-dialog-content").dialog("close");
}

function setCommDetailesValues(p_data) {

    $$("lblHomeAddress").html(String.format("{0}{1}{2}{3}, {4}"
            , p_data.VillageNameRA
            , (p_data.StreetNameRA.length > 0) ? String.format(", {0} {1}", p_data.StreetNameRA, p_data.HouseNumRA) : ''
            , (p_data.EntranceRA.length > 0) ? String.format(",<br />כניסה {0}", p_data.EntranceRA) : ''
            , (p_data.ApartmentNumRA.length > 0) ? String.format(", דירה {0}", p_data.ApartmentNumRA) : ''
            , p_data.ZipCodeRA
            ));

    if (p_data.MailAddressSameAsResidence == "1") {
        //$("#ShipmentAddress").show();
        switch (p_data.AddressTypeMA) {
            case "1": // עיר
            case "4": // קיבוץ/מושב/כפר
                $$("lblShipmentAddress").html(String.format("{0}{1}{2}{3}, {4}"
                        , p_data.VillageNameMA
                        , (p_data.StreetNameMA.length > 0) ? String.format(", {0} {1}", p_data.StreetNameMA, p_data.HouseNumMA) : ''
                        , (p_data.EntranceMA.length > 0) ? String.format(",<br />כניסה {0}", p_data.EntranceMA) : ''
                        , (p_data.ApartmentNumMA > 0) ? String.format(", דירה {0}", p_data.ApartmentNumMA) : ''
                        , p_data.ZipCodeMA
                        ));
                break;
            case "2": // תא דואר
                $$("lblShipmentAddress").html(String.format("{0}, ת.ד.{1} ,{2}"
                        , p_data.VillageNameMA
                        , p_data.PostOfficeMA
                        , p_data.ZipCodeMA
                        ));
                break;
            case "3": // תא בסניף בנק
                $$("lblShipmentAddress").html(String.format("{0}, {1}"
                        , String.format("{0} - {1}", p_data.BankCodeMA, p_data.BankNameMA)
                        , String.format("<br />{0} - {1}", p_data.BranchCodeMA, p_data.BranchNameMA)
                        ));
                break;
            default:
                break;
        }
    }
    else {
        //$("#ShipmentAddress").hide();

        $$("lblShipmentAddress").html(String.format("{0}{1}{2}{3}, {4}"
            , p_data.VillageNameRA
            , (p_data.StreetNameRA.length > 0) ? String.format(", {0} {1}", p_data.StreetNameRA, p_data.HouseNumRA) : ''
            , (p_data.EntranceRA.length > 0) ? String.format(",<br />כניסה {0}", p_data.EntranceRA) : ''
            , (p_data.ApartmentNumRA.length > 0) ? String.format(", דירה {0}", p_data.ApartmentNumRA) : ''
            , p_data.ZipCodeRA
            ));
    }

    if (p_data.txtHomePhoneArea.length > 0)
        $$("lblHomePhoneNumber").text(String.format("{0}-{1}", p_data.txtHomePhoneArea, p_data.txtHomePhoneNumber));
    else
        $$("lblHomePhoneNumber").text('');
    if (p_data.txtMobilePhoneArea.length > 0)
        $$("lblMobilePhoneNumber").text(String.format("{0}-{1}", p_data.txtMobilePhoneArea, p_data.txtMobilePhoneNumber));
    else
        $$("lblMobilePhoneNumber").text('');

    $$("lblEmailAddress").text(p_data.EmailAddress);



    $(".ui-dialog-content").dialog("close");
}

function setBudgetDetailsValues(p_data) {
    $$("lblEducation").text(p_data.EducationLevelName);
    $$("lblProfession").text(p_data.ProfessionName);
    $$("lblWorkFunction").text(p_data.WorkFunction);
    $$("lblProfessionCode").text(p_data.ProfessionCodeName);
    $$("lblCompanyName").text(p_data.CompanyName);
    $$("lblWorkPhone").text(p_data.WorkPhoneFull);
    //$$("lblSeniority").text(p_data.Seniority == 0 ? "0 שנים" : String.format("{0} שנים", p_data.Seniority));
    $$("lblNumOfProviders").text(p_data.NumOfProviders);
    $$("lblVehicleOwnership").text(p_data.VehicleOwnershipName);
    $$("lblTotalExpenses").text(p_data.TotalExpenseAmountF);
    $$("lblFamilyIncome").text(p_data.FamilyIncomeAmountF);
    $(".ui-dialog-content").dialog("close");
}

function setEligibilityCheckScreenGraceValues(p_data) {
    $(".total_payments_value").text(p_data.TotalPaymentsValue);

    $$("lblTotalLoan").text(p_data.TotalLoan);
    $$("lblNumberOfPayments").text(p_data.NumberOfPayments);
    $$("lblGracePaymentStartMonth").text(p_data.GracePaymentStartMonth);

    $$("lblFirstPaymentAmount").text(p_data.FirstPaymentAmount);
    $$("GraceInterestAmountPayment div.label").html(String.format("סכום ההחזר החל מהחודש<br />השני למשך {0} חודשים", p_data.GracePayments - 1));
    $$("lblGraceInterestAmountPayment").text(p_data.GraceInterestAmountPayment);
    $$("MonthlyPaymentAmount div.label").html(String.format("סכום ההחזר הקבוע<br />מהחודש ה-{0}", p_data.GracePayments + 1));
    $$("lblMonthlyPaymentAmount").text(p_data.MonthlyPaymentAmount);
    $$("lblLastPaymentAmount").text(p_data.LastPaymentAmount);

    $$("lblTotalPayment").text(p_data.TotalPayment);

    $$("lblYearlyNominallyInterest").text(p_data.YearlyNominallyInterest);
    $$("lblYearlyEffectivelyInterest").text(p_data.YearlyEffectivelyInterest);

    $$("hidApprovedAmountsList").val(p_data.SerializedApprovedAmounts);
    ApprovedAmountsList = $$("hidApprovedAmountsList").val();

    unblockUIPaymentsSlider();
    unblockUIPaymentsResults();
    GetCalcPayments(p_data.RequestedAmount);
}


function setEligibilityCheckScreenShpitzerValues(p_data) {
    $(".total_payments_value").text(p_data.TotalPaymentsValue);
    
    $$("lblTotalLoan").text(p_data.TotalLoan);
    $$("lblNumberOfPayments").text(p_data.NumberOfPayments);
    $$("lblFirstPaymentAmount").text(p_data.FirstPaymentAmount);
    $$("lblMonthlyPaymentAmount").text(p_data.MonthlyPaymentAmount);
    $$("lblLastPaymentAmount").text(p_data.LastPaymentAmount);
    $$("lblTotalPayment").text(p_data.TotalPayment);

    $$("lblYearlyNominallyInterest").text(p_data.YearlyNominallyInterest);
    $$("lblYearlyEffectivelyInterest").text(p_data.YearlyEffectivelyInterest);
    $$("lblBridgingInterest").text(p_data.BridgingInterest);

    unblockUIPaymentsSlider();
    unblockUIPaymentsResults();
    GetCalcPayments(p_data.RequestedAmount);
}

function setEligibilityCheckScreenButtons() {

    if (_wizard != undefined) {
        //alert(String.format("({0},{1})", _wizard.currentStep + 1, _wizard.currentSection - 1));
        if (((_wizard.currentStep + 1) == 3) && ((_wizard.currentSection - 1) == 1)) // מסך בדיקת זכאות
        {
            $("#cancelLoanRequest").removeClass("cancel_container_hidden");
            $(".button_container").addClass("button_approve_loan");
        }
    }
}

function refreshPage() {    
    location.href = "LoanApplication.aspx?is357=true";
}

function closeErrorPopUpDelegate() {
    var _location = location.href;

    if (parent) {
        _location = parent.location;
    }

    //Dont CheckIN - need to leave with redirection
    _location.href = _homepageUrl;
}


function invalidateFieldCollection(p_arrFields) {
    var controlId = null;
    //for (var i = 0; i < controlArray.length; i++)
    // showLoanFormFieldError($$(String.format('{0}_divCtrl', controlArray[i].Key)), controlArray[i].Value, true);
    //$(controlArray[i].Key)
    //inavalidateFieldCollection(controlArray);

    /*

    p_control.children('[bindableField=true]').animate(
    { borderTopColor: '#FF0000', borderLeftColor: '#FF0000', borderBottomColor: '#FF0000', borderRightColor: '#FF0000' },
    { duration: 300 });

    p_control.children('[bindableField=true]').attr("has-error", true);
    */
}


function validateLoanForm(p_formUiSelector) {

    resetForm();    

    var textboxes = $(p_formUiSelector).find(".cal_text_box:visible").not(".ui-autocomplete-input");
    var comboboxes = $(p_formUiSelector).find(".combo_text_box:visible");
    var checkboxes = $(p_formUiSelector).find(".check_box:visible");
    var autocomplete = $(p_formUiSelector).find(".ui-autocomplete-input:visible");
    var isValid = true;
    var generalRegExp = "[0-9]|[א-ת]|[ ]"
    var regExp;
    var compareVld;
    var JQCtrl;
    var ctrlID;
    var isMandatory;
    var isDepend;

    textboxes.each(function () {
        isMandatory = false;
        _isValid = true;
        JQCtrl = $(this);
        ctrlID = JQCtrl.attr("id");        
        regExp = getVldHiddenField(ctrlID, "regExpHidden");
        customVldFunc = getVldHiddenField(ctrlID, "customVldHidden");
        compareVld = getVldHiddenField(ctrlID, "compareVldHidden");
        trimmedValue = $.trim(JQCtrl.val());

        if (JQCtrl.attr("mandatory") != null && ((trimmedValue.length == 0) ||
           ((JQCtrl.attr("item-value") != undefined) && ($.trim(JQCtrl.attr("item-value")).length == 0)))) {
            isDepend = chkDependancy(ctrlID);

            if (isDepend) {
                isMandatory = true;
            }

            if (isMandatory && trimmedValue.length == 0) {
                var msg = getVldHiddenField(ctrlID, "mandatoryHidden").attr("value");
                showLoanFormFieldError(JQCtrl, msg, false);
                _isValid = isValid = false;
            }
            else {
                hideFormFieldError(JQCtrl);
                _isValid = isValid = true;
            }
        }

        if (_isValid) {
            if (regExp != null && regExp.length > 0 && trimmedValue.length > 0) {
                var reg = new RegExp(regExp.attr("value"));
                if (!reg.test(JQCtrl.val())) {
                    var msg = getVldHiddenField(ctrlID, "regMsgHidden").attr("value");
                    showLoanFormFieldError(JQCtrl, msg, false);
                    _isValid = isValid = isValid && false;
                }
            }
        }

        if (_isValid) {
            if (compareVld != null && compareVld.length > 0) {
                if ($("#" + compareVld.val()).val() == JQCtrl.val()) {
                    var msg = getVldHiddenField(ctrlID, "compareVldMsgHidden").attr("value");
                    showLoanFormFieldError(JQCtrl, msg, false);
                    _isValid = isValid = isValid && false;
                }
            }
        }

        if (_isValid) {
            if (customVldFunc != null && customVldFunc.length > 0) {
                //MICHAEL FIX :  CHECK IF ONE HAS ALREADY PASSED ARGS TO THE VALIDATOR FUNC!
                var func = customVldFunc.attr("value");
                if (func.indexOf("(") == -1 && func.indexOf(")") == -1) {
                    func = func + "('" + ctrlID + "')";
                }
                else {
                    var pattSubstArg = /SUBSTTHISARG\{\d{1}\}/i;
                    func = func.replace(pattSubstArg, ctrlID);
                }

                //MICHAEL FIX END
                eval(func);
            }
        }

        // Removed 19/01/2012: Because cannot check today
        // EFI 19/01/2012: Check for characters different then generalRegExp = "[0-9]|[א-ת]|[ ]"
        //            if (_isValid) {
        //                if ($.trim(JQCtrl.val()).length > 0) {
        //                    var reg = new RegExp(generalRegExp);
        //                    if (!reg.test(JQCtrl.val())) {
        //                        var msg = String.format(GeneralRegExpMsg, ctrlID);
        //                        showLoanFormFieldError(JQCtrl, msg, false);
        //                        _isValid = isValid = isValid && false;
        //                    }
        //                }
        //            }

    });

    autocomplete.each(function () {
        JQCtrl = $(this);
        ctrlID = JQCtrl.attr("id");

        if (JQCtrl.attr("item-value") == undefined || (JQCtrl.attr("item-value") != undefined && ($.trim(JQCtrl.attr("item-value")).length == 0))) {
            var msg = '';
            if (JQCtrl.attr("mandatory") != null)
                msg = getVldHiddenField(ctrlID, "mandatoryHidden").attr("value");
            if (JQCtrl.val().length > 0)
                msg = getVldHiddenField(ctrlID, "regMsgHidden").attr("value");

            if (msg.length > 0) {
                showLoanFormFieldError(JQCtrl, msg, false);
                isValid = isValid && false;
            }
        }
    });

    comboboxes.each(function () {
        JQCtrl = $(this);
        _isValid = true;
        ctrlID = JQCtrl.attr("id");
        trimmedValue = $.trim(JQCtrl.val());
        customVldFunc = getVldHiddenField(ctrlID, "customVldHidden");

        if (JQCtrl.attr("mandatory") != null && JQCtrl.attr('selectedValue') == "") {
            var msg = getVldHiddenField(ctrlID, "mandatoryHidden").attr("value");
            showLoanFormFieldError(JQCtrl, msg, false);
            isValid = isValid && false;
        }

        if (_isValid) {
            if (customVldFunc != null && customVldFunc.length > 0) {
                eval(customVldFunc.attr("value"));
            }
        }

        if (_isValid) {
            if (JQCtrl.attr("mandatory") != null && ((trimmedValue.length == 0) ||
              ((JQCtrl.attr("item-value") != undefined) && ($.trim(JQCtrl.attr("item-value")).length == 0)))) {
                isDepend = chkDependancy(ctrlID);

                if (isDepend) {
                    isMandatory = true;
                }

                if (isMandatory && trimmedValue.length == 0) {
                    var msg = getVldHiddenField(ctrlID, "mandatoryHidden").attr("value");
                    showLoanFormFieldError(JQCtrl, msg, false);
                    _isValid = isValid = false;
                }
                else {
                    hideFormFieldError(JQCtrl);
                    _isValid = isValid = true;
                }
            }
        }

    });

    checkboxes.each(function () {
        if ($(this).attr("mandatory") != null && !$(this).attr("checked")) {
            showLoanFormFieldError($(this), "שדה חובה ", false);
            isValid = isValid && false;
        }
    });

    // Check all the rest that has attribure "has-error"
    if ($(p_formUiSelector).find("[has-error]").length > 0)
        isValid = isValid && false;
        
    return isValid;

}

function chkDependancy(p_ctrlID) {
    if (getVldHiddenField(p_ctrlID, "mandatoryDependancyHidden").attr("value")) {
        var dependancy = getVldHiddenField(p_ctrlID, "mandatoryDependancyHidden").attr("value");
        var dependancyCtrlID;
        var dependancyCtrlValue;
        var arr = dependancy.split(";");
        var isEqual = true;
        var retValue = true;

        //loop for all depandancies
        for (var i = 0; i < arr.length; i++) {            
            dependancyCtrlID = arr[i].split(":")[0];
            dependancyCtrlValue = arr[i].split(":")[1];
            // set empty string for '' in dependancy
            dependancyCtrlValue = dependancyCtrlValue.replace("''", "");
            // ^ represent not equal sign
            if (dependancyCtrlValue.substring(0, 1) == "^") {
                dependancyCtrlValue = dependancyCtrlValue.substring(1);
                isEqual = false;
            }
            var ctrl = $("[bindablename=" + dependancyCtrlID + "]");
            if (!ctrl.is("input"))
                ctrl = ctrl.find("input:checked");

            if (isEqual) {
                // if one of the equal dependancies failed than return false
                if (ctrl.val() != dependancyCtrlValue)
                    return false;
            }

            if (!isEqual) {
                // if one of the not equal dependancies success than return true
                if (ctrl.val() != dependancyCtrlValue)
                    return true;
            }
            else
                retValue = false;
        }

        return retValue;                
    }
    else {
        return true;
    }    
}

/*

function CheckDependancyPhoneNumber(p_area, p_number, p_dependArea, p_dependNumber) {

    var areaCode = $("#" + p_area);
    var number = $("#" + p_number);

    var dependAreaCode = $("#" + p_dependArea);
    var dependNumber = $("#" + p_dependNumber);


    var isInValidArea = isNaN(areaCode.val()) || isNaN(dependAreaCode.val());

    var isEmptyNumber = number.val().length == 0 || dependNumber.val().length == 0;

    if (isInValidArea && isEmptyNumber)
        return true;
    else
        ValidatePhoneNumber(p_area, p_number);
}

*/

function ValidatePhoneNumber(p_area, p_number, fEmptyPhonePasses, msgEmptyArea, msgEmptyNumber, msgInvalidNumber) {
    
    var jsonHlper = new JsonHelper();
    var areaCode = $("#"+p_area);
    var number = $("#" + p_number);
    var regExp = new RegExp("^[0-9]{7}$");
    var parent = areaCode.parents(".control");
    
    var isInValidArea = isNaN(areaCode.val());

    var isEmptyNumber = number.val().length == 0;
    
    var isInValidNumber = isNaN(number.val()) || !regExp.test(number.val())

    if (fEmptyPhonePasses) {
        if (isInValidArea && isEmptyNumber)
            return true;
    }

    if (!msgEmptyArea)
        msgEmptyArea = "יש למלא קידומת טלפון";

    if (!msgEmptyNumber)
        msgEmptyNumber = "יש למלא מספר טלפון";

    if (!msgInvalidNumber)
        msgInvalidNumber = "מספר הטלפון שהוזן אינו תקין";

    if (isInValidArea) {
        jsonHlper.addJsonParam(new JsonVldPair(p_area, msgEmptyArea));
    }

    if (isEmptyNumber) {
        jsonHlper.addJsonParam(new JsonVldPair(p_number, msgEmptyNumber));
    }
    else if (isInValidNumber) {
        jsonHlper.addJsonParam(new JsonVldPair(p_number, msgInvalidNumber));
    }

    if (jsonHlper.HasParams) {
        showComplexFormFieldError(jsonHlper.toJSON());
        return false;
    }
    return true;
}

function idDateValidate(p_ctrl) {

    var iligalMsg = "תאריך הנפקת ת.ז. שהוזן אינו תקין. ניתן להיעזר בהסבר המוצג לצד השדה.";
    var EmptyMsg = "יש למלא את תאריך הנפקת ת.ז. – שנה, חודש ויום.";
    var isDateValid = dateValidate(p_ctrl, EmptyMsg,
        iligalMsg, false, false, 100, 0);

    if (!isDateValid)
        return;

    var _year = $("#IDDateYear").val();
    var _month = $("#IDDateMonth").val();
    var _day = $("#IDDateDay").val();
    var _currentYear = new Date().getFullYear();
    var _currentmonth = new Date().getMonth() + 1;
    var _currentday = new Date().getDate();
    if (_year == _currentYear &&
        ((_month == _currentmonth && _day > _currentday) ||
        (_month > _currentmonth))) {
        showLoanFormFieldError($("#IDDateYear"), iligalMsg, false);
    }

    //check if the date partial filled
    if (_day.length == 0 || _month.length == 0 || _year.length == 0) {
        if (_day.length > 0 || _month.length > 0 || _year.length > 0)
            showLoanFormFieldError($("#IDDateYear"), EmptyMsg, false);
    }
    else {
        var idDate = new Date(_year, parseInt(_month)-1, _day);
        var birthDate = new Date($("#BirthDateYear").val(), parseInt($("#BirthDateMonth").val())-1, $("#BirthDateDay").val());
        if (birthDate > idDate) {
            showLoanFormFieldError($("#IDDateYear"), iligalMsg, false);
        }
    }
}

function birthDateValidate(p_ctrl) {
    dateValidate(p_ctrl, "יש למלא את תאריך הלידה – שנה, חודש ויום.",
    "תאריך הלידה שהוזן אינו תקין. ניתן להיעזר בהסבר המוצג לצד השדה.", true, false);
}

function expDateValidate(p_ctrl) {
     dateValidate(p_ctrl, "יש למלא את תוקף הכרטיס – שנה וחודש",
    "תוקף הכרטיס שהוזן אינו תקין. ניתן להיעזר בהסבר המוצג לצד השדה.", true, true, 0, -7, false);
}

function startWorkDateValidate(p_idStartWorkDate, p_BirthDate, minAge, p_vldErrorMsg, p_vldReqMsg) {
    var wrapper = $("#StartWorkDate"); //.parents(".loan_form_row");
    var datebyProf = validateStartWorkDateByProfession('StartWorkDate', 'cmbProfession', p_vldReqMsg);
    if (datebyProf == "3") {
        return true;
    }
    if (datebyProf == "2") {
        if (dateValidate(p_idStartWorkDate, "",
        "תאריך תחילת עבודה שהוזן אינו תקין. ניתן להיעזר בהסבר המוצג לצד השדה.", false, false, 100, 0, true)) {

            var startWorkDate = new Date($("#StartWorkDateYear").val(), $("#StartWorkDateMonth").val(), 1);
            var BirthDate = new Date(p_BirthDate);
            var milli = startWorkDate - BirthDate;
            var milliPerYear = 1000 * 60 * 60 * 24 * 365.26;
            var workYears = milli / milliPerYear;

            if (workYears < minAge) {
                //showLoanFormFieldError($(wrapper.find(".cal_text_box")[0]), p_reqErrorMsg, false);
                showLoanFormFieldError(wrapper, p_vldErrorMsg, false);
                return false;
            }
            return true;
        }
    }
    return false;
}

function validateStartWorkDateByProfession(p_ctrl, p_idProfessionAS, p_reqErrorMsg) {
    var JQctrlY = $("#" + p_ctrl + "Year");
    var JQctrlM = $("#" + p_ctrl + "Month");
    var $asProfession = $("#" + p_idProfessionAS);
    var fWorkingProfession = true;

    if ($asProfession.attr('item-value') && $asProfession.attr('item-value') != '') {
        executeRequest("LoanApplication.aspx/CheckIfWorkingProfession", "{p_professionCode : " + $asProfession.attr('item-value') + "}",
                    function (p_isWorkingProf) {
                        fWorkingProfession = p_isWorkingProf;
                    },
                    null, null, null, false, 45000);

                    if (fWorkingProfession && (JQctrlY.val() == '' || JQctrlM.val() == '')) {
            showLoanFormFieldError(JQctrl, p_reqErrorMsg, false);
            return "1"; //the person is working and should've type start work date. break all further validations 
        }
    }
    if (fWorkingProfession) { //check next validation: Min age at start work date
        return "2";
    }
    else { //go ahead with no further check: the person ain't working at all
        return "3";
    }
    
}


function dateValidate(p_ctrl, p_reqMsg, p_iligelMsg, p_isRequired, isFutureDate, p_minYear, p_maxYear, fYYYYFormat) {
    var wrapper = $("#" + p_ctrl).parents(".loan_form_row");
    var isEmpty = false;
    var isIligal = false;
    var msg = "";

    var numEmptyDateBox = 0;
    var _currentYear = new Date().getFullYear();
    var _currentmonth = new Date().getMonth();
    var _year = new Date().getFullYear();
    var _yearValue = "";
    var _monthValue = "";

    $(".cal_text_box", wrapper).each(function () {
        // השלמת שנה בת 2 תווים ל-4 תווים לטובת הבדיקה בהמשך
        if (this.id.toLowerCase().indexOf("year") > -1) {
            _yearValue = this.value;
            if (this.value.length == 2) {
                if (fYYYYFormat) {
                    isIligal = true;
                }
                // If input year as 2 digits when expected to get 4, then put an error message
                if (this.maxLength == 4) {
                    isIligal = true;
                }
                _yearValue = "20" + this.value;
            } 
        }
        if (this.id.toLowerCase().indexOf("month") > -1) {
            _monthValue = this.value;
        }
        if (this.value.length == 0) {
            numEmptyDateBox++;
            if (p_isRequired) {
                showLoanFormFieldError($(this), "", false);
                isEmpty = true;
            }
        }
        else if (this.value.length > 4 || isNaN(this.value) || $.trim(this.value) == "0") {
            showLoanFormFieldError($(this), "", false);
            isIligal = true;
        }
        else if (isFutureDate && _yearValue && _monthValue && ((_yearValue < _currentYear) ||
        (_yearValue == _currentYear && _monthValue < _currentmonth))) {
            showLoanFormFieldError($(this), "", false);
            p_iligelMsg = "תוקף הכרטיס שהוזן פג. נא להזין תאריך עתידי";
            isIligal = true;
        }
        else if (this.id.toLowerCase().indexOf("month") > -1 && parseInt(this.value) > 12) {
            showLoanFormFieldError($(this), "", false);
            isIligal = true;
        }
        else if (this.id.toLowerCase().indexOf("day") > -1 && parseInt(this.value) > 31) {
            showLoanFormFieldError($(this), "", false);
            isIligal = true;
        }
        else if (this.id.toLowerCase().indexOf("year") > -1 && (parseInt(_yearValue) < _year - p_minYear || parseInt(_yearValue) > _year - p_maxYear)) {
            showLoanFormFieldError($(this), "", false);
            isIligal = true;
        }
    });

    if (isEmpty) {
        showLoanFormFieldError($(wrapper.find(".cal_text_box")[0]), p_reqMsg, false);
        return false;
    }
    else if (isIligal) {
        showLoanFormFieldError($(wrapper.find(".cal_text_box")[0]), p_iligelMsg, false);
        return false;
    }

    if (!p_isRequired) {
        if (numEmptyDateBox > 0 && numEmptyDateBox < $(".cal_text_box", wrapper).length) {
            showLoanFormFieldError($(wrapper.find(".cal_text_box")[0]), p_iligelMsg, false);
            return false;
        }
    }

    return true;
}

function loadSupportRequestDialog() {

    //////////////////////////////
    // Begin - Google Analytics //
    //////////////////////////////
    try {
        var GoogleAnaliticsFolderLocation = _calLoanManagerEnvironment == AppEnvironment.CalOnline ? "CalOnline" : "Marketing";
        $("iframe")[0].contentWindow.TrackingEventClick("RequestCallback", GoogleAnaliticsFolderLocation);
    } catch (e) { }
    ////////////////////////////
    // End - Google Analytics //
    ////////////////////////////
		
    executeRequest("MarketingLead.aspx/LoadSupportForm", "", onSupportRequestLoadSuccessDelegate, onSupportRequestLoadFailureDelegate);
}

function onSupportRequestLoadSuccessDelegate(p_response) {
    _supportRequestDialog = showSupportRequestDialog(p_response, onSubmitSupportRequestDelegate, onSupportRequestCloseDelegate);
    $("button.dialog_close_button").hide();
    createToolTips($(".support_dialog_form"));    
}

function onSupportRequestLoadFailureDelegate(p_response) {
    if (_supportRequestDialog)
        _supportRequestDialog.dialog('close');
    if (p_response.statusText == "timeout")
        failureGeneralCallBack("");
    else
        alert('FAILURE\n\r' + p_response);
}

function onSupportRequestCloseDelegate() {
    if (_supportRequestPhoneAreaCombo)
        _supportRequestPhoneAreaCombo.dropdown('destroy');

    if ($("button.dialog_close_button:visible").length > 0)
        location.href = _sUrl;

    //$("button.dialog_close_button").show();
    $(".ui-dialog-content").dialog("close");
}

function createSupportRequestAreaCombo(p_comboId) {
    _supportRequestPhoneAreaCombo = getPhoneAreaCombo(p_comboId);
}


function onSubmitSupportRequestDelegate() {
    var data = null;

    if (_supportRequestDialog && validateLoanForm(".support_dialog_form")) {


        //////////////////////////////
        // Begin - Google Analytics //
        //////////////////////////////
        try {
            var GoogleAnaliticsFolderLocation = _calLoanManagerEnvironment == AppEnvironment.CalOnline ? "CalOnline" : "Marketing";
            $("div.support_dialog_form").append(String.format("<iframe class=\"iframe_hidden\" allowtransparency=\"true\" scrolling=\"no\" frameborder=\"0\" src=\"../../SCREENS/GoogleAnalytics/Loans/{0}/LoanSupportForm.htm\" ></iframe>", GoogleAnaliticsFolderLocation));
            $("iframe")[0].contentWindow.TrackingEventClick("AskForService", GoogleAnaliticsFolderLocation);
        }
        catch (e) { }
        ////////////////////////////
        // End - Google Analytics //
        ////////////////////////////
		
        _supportRequestDialog.dialog('showAjaxLoadingAnimation');

        data = _jsonHelper.collectData("div.support_dialog_form").toObject("p_request");

        _jsonHelper.resetObject();

        executeRequest("MarketingLead.aspx/SubmitSupportRequest", data, onSupportRequestSubmitSuccessDelegate, onSupportRequestSubmitFailureDelegate);        
    }
}


function showComplexFormFieldError(p_targetControls) {

    var bindings = p_targetControls.bindings;
        
    for (var i = 0; i < bindings.length; i++) {
        showLoanFormFieldError($("#" + bindings[i].control), bindings[i].text);
    }
}


function showLoanFormFieldError(p_control, p_text) {

    var parent = null;
    var children = p_control.find('[bindableField=true]');

    if (children.length > 0) {
        children.each(function () {
            $(this).attr("has-error", true)
            animateErrorBorder($(this));
        });

        parent = p_control;
    }
    else {
        p_control.attr("has-error", true);

        animateErrorBorder(p_control);

        parent = p_control.parents(".control");
    }

    insertErrorLayer(parent, p_text);
}

function animateErrorBorder(p_control) {
    p_control.animate({ borderTopColor: '#FF0000', borderLeftColor: '#FF0000', borderBottomColor: '#FF0000', borderRightColor: '#FF0000' }, { duration: 300 });
}

function insertErrorLayer(p_errorParent, p_text) {
    if (p_text != undefined && p_text != "") {
        var error = $('<div class="error">' + p_text + '</div>');
        $(error).appendTo(p_errorParent);
        error.fadeIn(300);
    }
}

function resetForm() {
    $(document).find(".error").remove();
    $(document).find("[has-error]").animate(
        { borderTopColor: '#CDCBC8', borderLeftColor: '#CDCBC8', borderBottomColor: '#CDCBC8', borderRightColor: '#CDCBC8' },
        { duration: 300 });

    $(document).find("[has-error]").removeAttr("has-error");
    createToolTips();
}

function hasFieldError(p_control) {
    if (typeof (p_control) == 'undefined') {
        return false;
    }
    return p_control.attr('has-error') == 'true';
}
        
//    function showLoanFormFieldError1(p_control, p_text, p_isParentRow, p_parentSelector) 
//    {
//        if (p_isParentRow) 
//        {
//            p_control.children('[bindableField=true]').animate(
//            { borderTopColor: '#FF0000', borderLeftColor: '#FF0000', borderBottomColor: '#FF0000', borderRightColor: '#FF0000' },
//            { duration: 300 });

//            p_control.children('[bindableField=true]').attr("has-error", true);
//        }
//        else 
//        {
//            p_control.animate(
//            { borderTopColor: '#FF0000', borderLeftColor: '#FF0000', borderBottomColor: '#FF0000', borderRightColor: '#FF0000' },
//            { duration: 300 });

//            p_control.attr("has-error", true);
//            p_control = p_control.parent();
//        }

//        if (typeof (p_parentSelector) != 'undefined') {
//            p_control = p_control.parents(p_parentSelector);
//        }

//        insertErrorLayer(p_control, p_text);
//    }

function hideFormFieldError(p_control) {

    p_control.animate({ borderTopColor: '#cdcbc8', borderLeftColor: '#cdcbc8', borderBottomColor: '#cdcbc8', borderRightColor: '#cdcbc8' });

    var parent = p_control.parents('.loan_form_row');

    if (parent.find(".error").length == 1) {
        var error = parent.find(".error");

        if (error) {
            error.fadeOut(500, function () { error.remove(); });
        }
    }

    clearErrorMark(p_control);
}

function clearErrorMark(p_control) {
    if (typeof(p_control.attr("has-error") != 'undefined')) {
        p_control.removeAttr("has-error");
    }

}

function getVldHiddenField(p_ctrlID, p_suffix) {
    var c = $$(p_ctrlID + "_" + p_suffix);
    if (c && c.length) return c;

    return $$(p_ctrlID.substring(p_ctrlID.lastIndexOf('_') + 1) + "_" + p_suffix);
}

function onSupportRequestSubmitSuccessDelegate(p_response) {
    $("button.dialog_send_button").hide();
    $("button.dialog_close_button").show();
    
    var dialogBody = $("div.dialog_type_wrapper");    
    if (p_response.Status == ResponseStatus.Success) {
        _supportRequestDialog.dialog('replaceContent', "בקשתך התקבלה", "בקשתך התקבלה והועברה לטיפול", "success_dialog dialog_image_holder");
    }
    else {
        _supportRequestDialog.dialog('replaceContent', _dialogMessages.getContent('TerminateProcess').header,
        _dialogMessages.getContent('TerminateProcess').body, "fault_dialog dialog_image_holder");        
    }
    
    setTimeout(function () { _supportRequestDialog.dialog('hideAjaxLoadingAnimation') }, 500);
}

function onSupportRequestSubmitFailureDelegate(p_response) {
    if (_supportRequestDialog)
        _supportRequestDialog.dialog('close');
    if (p_response.statusText == "timeout") {
        failureGeneralCallBack("");        
    }
    else
        alert('FAILURE\n\r' + p_response);
}

function ValidateDependantPhoneNumber(p_ctrl) {

    chkPhonesDependancy(p_ctrl);

}

function chkPhonesDependancy(p_ctrlID) {
    if (getVldHiddenField(p_ctrlID, "mandatoryDependancyHidden").attr("value")) {
        var dependancy = getVldHiddenField(p_ctrlID, "mandatoryDependancyHidden").attr("value");
        
        var arr = dependancy.split(";");

        var regExp = new RegExp("^[0-9]{7}$");
        
        var isEqual = true;
        var retValue = true;

        var currentPhoneAreaID = String.format("txt{0}Area", arr[0]);
        var currentPhoneNumberID = String.format("txt{0}Number", arr[0]);
        var dependancyPhoneAreaID = String.format("txt{0}Area", arr[1]);
        var dependancyPhoneNumberID = String.format("txt{0}Number", arr[1]);

        var currentPhoneArea = $(String.format("#txt{0}Area", arr[0])).attr("selectedvalue");
        var currentPhoneNumber = $(String.format("#txt{0}Number", arr[0])).val(); 
        var dependancyPhoneArea = $(String.format("#txt{0}Area", arr[1])).attr("selectedvalue");
        var dependancyPhoneNumber = $(String.format("#txt{0}Number", arr[1])).val();

        var isCurrentPhoneAreaValid = !isNaN(currentPhoneArea) && currentPhoneArea.length > 0;
        var isCurrentPhoneNumberOK = currentPhoneNumber.length > 0;
        var isDependancyPhoneAreaValid = !isNaN(dependancyPhoneArea) && dependancyPhoneArea.length > 0;
        var isDependancyPhoneNumberOK = dependancyPhoneNumber.length > 0;

        if (isCurrentPhoneAreaValid && isCurrentPhoneNumberOK && isDependancyPhoneAreaValid && isDependancyPhoneNumberOK) {
            ValidatePhoneNumber(currentPhoneAreaID, currentPhoneNumberID);
            ValidatePhoneNumber(dependancyPhoneAreaID, dependancyPhoneNumberID);
        }
        else if ((isDependancyPhoneAreaValid && isDependancyPhoneNumberOK) && (!isCurrentPhoneAreaValid || !isCurrentPhoneNumberOK)
                 && (isCurrentPhoneAreaValid || isCurrentPhoneNumberOK)) {
            ValidatePhoneNumber(currentPhoneAreaID, currentPhoneNumberID)
        }
        else if ((!isDependancyPhoneAreaValid && !isDependancyPhoneNumberOK) && (isCurrentPhoneAreaValid && isCurrentPhoneNumberOK)) {
            ValidatePhoneNumber(currentPhoneAreaID, currentPhoneNumberID)
        }
        else if ((isDependancyPhoneAreaValid && isDependancyPhoneNumberOK) && (!isCurrentPhoneAreaValid && !isCurrentPhoneNumberOK)) {
            ValidatePhoneNumber(dependancyPhoneAreaID, dependancyPhoneNumberID);
        }
        else if ((!isDependancyPhoneAreaValid || !isDependancyPhoneNumberOK) && (isCurrentPhoneAreaValid && isCurrentPhoneNumberOK)
                 && (isDependancyPhoneAreaValid || isDependancyPhoneNumberOK)) {
            ValidatePhoneNumber(dependancyPhoneAreaID, dependancyPhoneNumberID);
        }
        else {
            //ValidatePhoneNumber(currentPhoneAreaID, currentPhoneNumberID);
            //ValidatePhoneNumber(dependancyPhoneAreaID, dependancyPhoneNumberID);
            var jsonHlper = new JsonHelper();
            var msgDependancyPhone = "יש צורך למלא טלפון בבית או טלפון נייד";
            jsonHlper.addJsonParam(new JsonVldPair(currentPhoneAreaID, msgDependancyPhone));
            jsonHlper.addJsonParam(new JsonVldPair(currentPhoneNumberID, ""));
            jsonHlper.addJsonParam(new JsonVldPair(dependancyPhoneAreaID, ""));
            jsonHlper.addJsonParam(new JsonVldPair(dependancyPhoneNumberID, ""));
            showComplexFormFieldError(jsonHlper.toJSON());
        }


    }
}


function validatePartner(p_ctrl) {
    if (isEmptyInput("txtPartnerName") && isEmptyInput("txtPartnerLastName")
        && isEmptyInput("txtPartnerIDNum") && $("span[bindablename=FamilyStatus] input:checked").val() == "2") {
        var JQctrl = $("#" + p_ctrl);
        if (JQctrl.attr("has-error") == undefined) {
            var msg = "יש למלא פרטי בן/בת זוג: שם פרטי, שם משפחה ומספר תעודת זהות";
            showLoanFormFieldError($("#txtPartnerName"), "", false);
            showLoanFormFieldError($("#txtPartnerLastName"), "", false);
            showLoanFormFieldError(JQctrl, msg, false);
        }

    }
    else {
        validateCustomID(p_ctrl);
    }
}

function isEmptyInput(p_ctrlId) {
    return $("#" + p_ctrlId).val().length == 0;
}

function validateCustomID(p_ctrl) {
    isDepend = chkDependancy(p_ctrl);

    if (isDepend) {
        var JQctrl = $("#" + p_ctrl);
        if (JQctrl.val().length < 9) {
            if (JQctrl.attr("has-error") == undefined) {
                var msg = "יש למלא מספר בן 9 ספרות בדיוק כולל ספרת ביקורת.";
                showLoanFormFieldError(JQctrl, msg, false);
            }
        }
        else {
            validateLoanUserID(p_ctrl);
        }
    }
}

function validateLoanAmount(p_ctrl) {
    var JQctrl = $("#" + p_ctrl);

    var msg = "";
    if (JQctrl.val() < _loanMinAmount)
        msg = "סכום ההלוואה המבוקש נמוך מהסכום המינימלי האפשרי";
    else if (JQctrl.val() > _loanMaxAmount)
        msg = "סכום ההלוואה המבוקש גבוה מהסכום המקסימלי האפשרי";

    if (msg.length > 0)
        showLoanFormFieldError(JQctrl, msg, false);

}

function validateLoanUserID(p_ctrl) {
    var JQctrl = $("#" + p_ctrl);
    
    if (JQctrl.attr("has-error") == undefined) {
        if (ValidateID(JQctrl.val()) != 1) {            
            var msg = getVldHiddenField(p_ctrl, "regMsgHidden").attr("value");            
            showLoanFormFieldError(JQctrl, msg, false);
        }
    }
}

function validateIncomeRange(p_ctrl, p_boundLow, p_boundHigh, p_errMsgLowBound, p_errMsgHighBound) {
    var JQctrl = $("#" + p_ctrl);

    var msg = "";
    if (JQctrl.val() < p_boundLow)
        msg = p_errMsgLowBound;
    else if (JQctrl.val() > p_boundHigh)
        msg = p_errMsgHighBound;

    if (msg.length > 0)
        showLoanFormFieldError(JQctrl, msg, false);

    return true;
}


function validateCompanyNameByProfession(p_ctrl, p_idProfessionAS, p_reqErrorMsg) {
    var JQctrl = $("#" + p_ctrl);
    var $asProfession = $("#" + p_idProfessionAS);
    var fWorkingProfession = true;

    if ($asProfession.attr('item-value') && $asProfession.attr('item-value') != '') {
        executeRequest("LoanApplication.aspx/CheckIfWorkingProfession", "{p_professionCode : " + $asProfession.attr('item-value') + "}",
                    function (p_isWorkingProf) {
                        fWorkingProfession = p_isWorkingProf;
                    },
                    null, null, null, false, 45000);

        if (fWorkingProfession && JQctrl.val() == '')
            showLoanFormFieldError(JQctrl, p_reqErrorMsg, false);
    }

    return true;
}


    // DO Not Delete ! for getting list of objects online when typing the requested string
    //function LoadBankDetailsAutoSuggest() {
    //    $("#ctl00_FormArea_wizFirstStep_IDBankName_cmbBankName").autocomplete({
    //        source: function (req, resp) {
    //            $.ajax({
    //                type: "POST",
    //                url: "LoanApplication.aspx/GetBankDetails",
    //                data: '{"term" : "' + req.term + '"}',
    //                contentType: "application/json; charset=utf-8",
    //                dataType: "json",
    //                async: true,
    //                success: function (response) {
    //                    $(p_successDelegate(response.d));
    //                },
    //                error: function (msg) {
    //                    $(p_failureDelegate(msg.d));
    //                }
    //            });
    //        },
    //        minLength: 1,
    //        select: function (event, ui) {
    //            onSelectedBankDelegate(ui.item.data);
    //        }
    //    });
    //}


function getVillageDetails(p_controlId) {
    executeRequest("LoanApplication.aspx/GetVillageDetails", "", successGetVillageDetailsCallBack, failureGeneralCallBack);
    function successGetVillageDetailsCallBack(p_response) {
        autosuggestInitControl(p_controlId, p_response);
        $$(p_controlId).unbind("autocompleteselect");
        $$(p_controlId).bind("autocompleteselect", function (event, ui) {
            $(this).addClass('ajax_load');
            onSelectedVillageMaDelegate(ui.item.data);
        });
    }
}


function getBankDetails(p_controlId) {    
    executeRequest("LoanApplication.aspx/GetBankDetails", "", successGetBankDetailsCallBack, failureGeneralCallBack);
    function successGetBankDetailsCallBack(p_response) {
        autosuggestInitControl(p_controlId, p_response);
        $$(p_controlId).unbind("autocompleteselect");
        $$(p_controlId).bind("autocompleteselect", function (event, ui) {            
            $(this).addClass('ajax_load');
            executeRequest("LoanApplication.aspx/GetBranchNums", "{p_bankCode : " + ui.item.data + "}", successBranchCallBack, failureGeneralCallBack, null, onGeneralCompleteDelegate);
            function successBranchCallBack(p_response) {
                autosuggestInitControl("asgStreetNameMA", p_response);
            }
        });
    }
}


function onSelectedBankDelegate(selectedIndex) {    
    executeRequest("LoanApplication.aspx/GetBranchNums", "{p_bankCode : " + selectedIndex + "}", successBranchNumCallBack, failureGeneralCallBack, null, onGeneralCompleteDelegate);
    function successBranchNumCallBack(p_response) {
        $("#cmbBranchNumber").removeAttr("disabled");
        autosuggestInitControl("cmbBranchNumber", p_response);
    }

    executeRequest("LoanApplication.aspx/GetAccountTypes", "{p_bankCode : " + selectedIndex + "}", successAccountTypesCallBack, failureGeneralCallBack, null, onGeneralCompleteDelegate);
    function successAccountTypesCallBack(p_response) {
        _accountTypeComboBox.dropdown('updateDataItems', p_response);
        _accountTypeComboBox.dropdown('enable');
    }

}

function onGeneralCompleteDelegate() {
    $(".ajax_load").removeClass("ajax_load");
}

function onProfileChange(selectedIndex) {

    var isGraceProfileSelected = false;
    if ($$("hidGraceProfileCodes").val().length > 10) {
        var graceProfiles = JSON.parse($$("hidGraceProfileCodes").val())
        for (var i = 0; i < graceProfiles.length; i++) {
            if (graceProfiles[i].LoanProfileCode === selectedIndex) {

                loadGracePaymentsComboBox(selectedIndex);

                //setTimeout(function () { $$("GracePayments").slideDown("slow") }, 3000);
                $$("GracePayments").fadeIn(1500);
                isGraceProfileSelected = true;
                break;
            }
        }
    }
    if (!isGraceProfileSelected) {
        //setTimeout(function () { $$("GracePayments").slideUp("slow") }, 3000);
        $$("GracePayments").fadeOut(500);
    }

    _debitDayComboBox.dropdown('ajaxLoadRequest', 'LoanApplication.aspx/GetDayOfLoanDebit', '{p_profile : ' + selectedIndex + '}', ajaxDayOfLoanDebitComplete);

    function ajaxDayOfLoanDebitComplete(p_response) {
        _debitDayComboBox.dropdown('updateDataItems', p_response);
        _debitDayComboBox.dropdown('enable');
    }
}

function loadGracePaymentsComboBox(selectedProfileCode) {
    _gracePaymentsComboBox.dropdown('ajaxLoadRequest', 'LoanApplication.aspx/GetMonthsOfGracePayments', '{p_profileCode : ' + selectedProfileCode + '}', ajaxGraceComplete);
    function ajaxGraceComplete(p_response) {
        _gracePaymentsComboBox.dropdown('updateDataItems', p_response);
    }
}

function onSelectedVillageRaDelegate(p_selectedIndex) {
//    executeRequest("LoanApplication.aspx/GetStreetNums", "{p_cityCode : " + selectedIndex + "}", successStreetCallBack, failureGeneralCallBack);
//    function successStreetCallBack(p_response) {
//        autosuggestInitControl("asgStreetNameRA", p_response);
//    }

    onCityChanged("asgStreetNameRA", p_selectedIndex);

}

function onSelectedVillageMaDelegate(p_selectedIndex) {
    onCityChanged("asgStreetNameMA", p_selectedIndex);    
}


//function onSelectedCityDelegate(p_selectedIndex) {
//    onCityChanged("cmbStreet", p_selectedIndex);
//}


function onCityChanged(p_streetCtrl, p_selectedIndex) {
//    executeRequest("LoanApplication.aspx/GetStreetNums", "{p_cityCode : " + p_selectedIndex + "}", successStreetCallBack, failureGeneralCallBack);
//    function successStreetCallBack(p_response) {
//        autosuggestInitControl(p_streetCtrl, p_response);
//    }
    getStreetsAsyncWhileTyping("LoanApplication.aspx/GetStreetNums", p_streetCtrl, p_selectedIndex);

    checkExistingStreetsForCity("LoanApplication.aspx/GetStreetNums", p_streetCtrl, p_selectedIndex);
}



function getStreetsAsyncWhileTyping(p_methodPath, p_streetCtrlId, p_cityCode) {

    onGeneralCompleteDelegate();

    $("#" + p_streetCtrlId).customautocomplete({
        source: function (req, resp) {
            executeRequest(p_methodPath
                , '{"term" : "' + req.term + '", "p_cityCode" : "' + p_cityCode + '"}'
                , function (p_response) { resp(JSON.parse(p_response)) }
                , failureGeneralCallBack
                , function () { $("#" + p_streetCtrlId).addClass('ajax_load') }
                , onGeneralCompleteDelegate);
        },
        minLength: 2,
        select: function (event, ui) {
            if(ui != undefined)
                $(this).attr("item-value", ui.item.data);
        }
    });


}


//function autosuggestOnSelect(p_controlId) {

//    $$(p_controlId).bind("autocompleteselect", function (event, ui) {
//        
//    });

//}



function autosuggestInitControl(p_controlId, p_response) { 

    var _autoCompleteData = JSON.parse(p_response);

    $$(p_controlId).customautocomplete("option", "source", _autoCompleteData);

}


////function successAccountTypesCallBack(p_response) {
////    _accountTypeComboBox.dropdown('updateDataItems', p_response);
//    
//    var comboCount = _accountTypeComboBox.dropdown('getDataItems').length;
//    if (comboCount == 1) {
//        // If there is only one then select the first to be Selected !
//        // TODO: Dotan need to handle this in the control !
//    }
//    else { // Check if there is default
//        
//    }

    //_accountTypeComboBox.dropdown('getValue');
    //_accountTypeComboBox.dropdown('setValue', '5');
    /*var p_ddlName = "cmbAccountType";
        
    $("div#" + p_ddlName + " div.ddl_content div.ddl_items").html(p_response);

    if ($("div#" + p_ddlName + " div.ddl_content div.ddl_items div.ddl_item").length > 0) {
    if ($("div#" + p_ddlName + " div.ddl_content div.ddl_items div.ddl_item").length == 1) {
    // If there is only one then select the first to be Selected !
    ddlSelect(p_ddlName, $("div#" + p_ddlName + " div.ddl_content div.ddl_items div.ddl_item")[0].attributes.value.value);
    }
    else // Check if there is default
    if ($("div#" + p_ddlName + " div.ddl_content div.ddl_items div.selected").length > 0) // Select default item in ddl
    ddlSelect(p_ddlName, $("div#" + p_ddlName + " div.ddl_content div.ddl_items div.selected")[0].attributes.value.value);
    }
    else {
    ddlSelect(p_ddlName, "");
    }

    ddlEnable(p_ddlName);*/

////    _accountTypeComboBox.dropdown('enable');
////}

function failureGeneralCallBack(p_response) {
    //alert("! שגיאה ביישום, אנא נסה שוב מאוחר יותר");
    myDialog = getFaultDialog(200, 350, _dialogMessages.getContent('TerminateProcess').header,
        _dialogMessages.getContent('TerminateProcess').body);
    myDialog.dialog('open');
}

